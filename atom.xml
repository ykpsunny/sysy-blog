<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sunny的博客</title>
  <icon>https://www.gravatar.com/avatar/19bada5bb5e517ac754b01b5f33e9b22</icon>
  <subtitle>越努力，越幸运</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//sysy.site/"/>
  <updated>2020-03-22T04:46:50.502Z</updated>
  <id>//sysy.site/</id>
  
  <author>
    <name>Sunny</name>
    <email>2309456411@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS 数组扁平化 (flatten)</title>
    <link href="//sysy.site/2020/03/21/js-arrayflatten/"/>
    <id>//sysy.site/2020/03/21/js-arrayflatten/</id>
    <published>2020-03-21T10:15:00.000Z</published>
    <updated>2020-03-22T04:46:50.502Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​    数组是 JS 中使用评率仅次于对象的数据结构，官方提供了诸多 API (比如：push，pop，shift，unshift ….)，今天我们来谈谈如何扁平化数组。</p><blockquote><p>顾名思义，扁平化数组就是将一些嵌套的多维数组转成一维数组。</p></blockquote><p>我们以一个例子贯穿全文:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>]], <span class="number">10</span>]</span><br></pre></td></tr></table></figure><h4 id="一、ES10-中提供的数组扁平化方法-—-flat"><a href="#一、ES10-中提供的数组扁平化方法-—-flat" class="headerlink" title="一、ES10 中提供的数组扁平化方法 — flat"></a>一、ES10 中提供的数组扁平化方法 — flat</h4><blockquote><p><strong>flat</strong> 方法会按照一个可指定的深度进行递归遍历数组，并将所有遍历到的元素合并为一个新的数组返回。</p></blockquote><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArray = arr.flat([depth])</span><br></pre></td></tr></table></figure><p>注意：dpeth 参数是可选的, 指定要提取嵌套数组的结构深度，默认值为 1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = array.flat(<span class="literal">Infinity</span>) <span class="comment">// 当参数为 Infinity 时代表，递归任意深度的嵌套数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="二、for…of-实现"><a href="#二、for…of-实现" class="headerlink" title="二、for…of 实现"></a>二、for…of 实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flatten = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">            <span class="built_in">Array</span>.isArray(item) ? flatten(item) : result.push(item)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;())</span><br><span class="line"><span class="built_in">console</span>.log(flatten(array)) <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><h4 id="三、生成器-Generator-实现"><a href="#三、生成器-Generator-实现" class="headerlink" title="三、生成器(Generator)实现"></a>三、生成器(Generator)实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">flatten</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        <span class="built_in">Array</span>.isArray(item) ? <span class="keyword">yield</span> *flatten(item) : <span class="keyword">yield</span> item</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log([...flatten(array)]) <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><h4 id="四、reduce-实现"><a href="#四、reduce-实现" class="headerlink" title="四、reduce 实现"></a>四、reduce 实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">result, item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> result.concat(<span class="built_in">Array</span>.isArray(item) ? flatten(item) : item)</span><br><span class="line">    &#125;, [])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(flatten(array)) <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><h4 id="五、利用-JSON-对象上的方法实现"><a href="#五、利用-JSON-对象上的方法实现" class="headerlink" title="五、利用 JSON 对象上的方法实现"></a>五、利用 JSON 对象上的方法实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flatten = <span class="function"><span class="params">arr</span> =&gt;</span> <span class="built_in">JSON</span>.parse(<span class="string">`[<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(arr).replace(<span class="regexp">/\[|\]/g</span>, <span class="string">''</span>)&#125;</span>]`</span>)</span><br><span class="line"><span class="built_in">console</span>.log(flatten(array)) <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><p><strong>缺点:</strong> 由于是使用 JSON.stringify 方法，它会隐式的把非 <strong>Boolean, Number, String, Object, Array, null</strong> 类型的值转化成 null</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;​    数组是 JS 中使用评率仅次于对象的数据结构，官方提供了诸多 API (比如：push，pop，shift，unshift ….)，今天我们来谈谈如何扁平化数组。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;顾名思义，扁平化数组就是将一些嵌套的多维数组转成一维数组。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们以一个例子贯穿全文:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; array = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]], &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;一、ES10-中提供的数组扁平化方法-—-flat&quot;&gt;&lt;a href=&quot;#一、ES10-中提供的数组扁平化方法-—-flat&quot; class=&quot;headerlink&quot; title=&quot;一、ES10 中提供的数组扁平化方法 — flat&quot;&gt;&lt;/a&gt;一、ES10 中提供的数组扁平化方法 — flat&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;flat&lt;/strong&gt; 方法会按照一个可指定的深度进行递归遍历数组，并将所有遍历到的元素合并为一个新的数组返回。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h5&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; newArray = arr.flat([depth])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：dpeth 参数是可选的, 指定要提取嵌套数组的结构深度，默认值为 1&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; result = array.flat(&lt;span class=&quot;literal&quot;&gt;Infinity&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 当参数为 Infinity 时代表，递归任意深度的嵌套数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result) &lt;span class=&quot;comment&quot;&gt;// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="//sysy.site/tags/javascript/"/>
    
      <category term="js-array" scheme="//sysy.site/tags/js-array/"/>
    
  </entry>
  
  <entry>
    <title>CSS 变量(variable) -- 实战篇</title>
    <link href="//sysy.site/2020/03/20/css-variable-2/"/>
    <id>//sysy.site/2020/03/20/css-variable-2/</id>
    <published>2020-03-20T13:31:00.000Z</published>
    <updated>2020-03-25T14:14:12.672Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、-网站换肤"><a href="#一、-网站换肤" class="headerlink" title="一、 网站换肤"></a>一、 网站换肤</h4><p>1、实现网站换肤功能，一般最先想到的是用全局 class 控制样式切换<br>缺点：全局控制 CSS，在项目不大，换肤样式不多的情况下，还能勉强够用。但是换肤样式很多的话，代码会非常臃肿，不利于维护。<br>2、通过 js 来切换引入 CSS 样式的 href 属性值，来达到样式切换的目的。<br>缺点：使用 js 改变 href 属性会带来加载延迟(样式文件越大，加载越久)。<br>3、使用 js 修改 css 变量值来达到换肤效果。</p><p>今天我们要说的就是第三种, 使用 js 修改 css 变量值来达到换肤效果</p><a id="more"></a><p><img src="https://cdn.pixabay.com/photo/2020/02/27/19/46/wood-4885659__340.jpg" alt="配图"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">        color: var(--color);</span><br><span class="line">        background-color: var(--bg-color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">        color: var(--active-color);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>风格一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>风格二<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先在根元素上定义背景颜色、字体颜色、active 颜色等变量</span></span><br><span class="line"><span class="keyword">const</span> style1 = &#123;</span><br><span class="line">    <span class="string">"--bg-color"</span>: <span class="string">"#f5f5f5"</span>,</span><br><span class="line">    <span class="string">"--color"</span>: <span class="string">"#222"</span>,</span><br><span class="line">    <span class="string">"--active-color"</span>: <span class="string">"#c90000"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> style2 = &#123;</span><br><span class="line">    <span class="string">"--bg-color"</span>: <span class="string">"#fff"</span>,</span><br><span class="line">    <span class="string">"--color"</span>: <span class="string">"#333"</span>,</span><br><span class="line">    <span class="string">"--active-color"</span>: <span class="string">"#ff6700"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> root = <span class="built_in">document</span>.documentElement,</span><br><span class="line">    btn1 = <span class="built_in">document</span>.getElementById(<span class="string">"btn1"</span>),</span><br><span class="line">    btn2 = <span class="built_in">document</span>.getElementById(<span class="string">"btn2"</span>);</span><br><span class="line">btn1.addEventListener(<span class="string">"click"</span>, () =&gt; styleHandle(root, style1));</span><br><span class="line">btn2.addEventListener(<span class="string">"click"</span>, () =&gt; styleHandle(root, style2));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">styleHandle</span>(<span class="params">elem, style</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> style) &#123;</span><br><span class="line">        <span class="keyword">if</span> (style.hasOwnProperty(prop)) &#123;</span><br><span class="line">            elem.style.setProperty(prop, style[prop]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、-条形加载-Loading"><a href="#二、-条形加载-Loading" class="headerlink" title="二、 条形加载 Loading"></a>二、 条形加载 Loading</h4><p><img src="/assets/blogImg/loading-bar.gif" alt="loading bar"></p><p>一个条形加载 Loading 通常由几条线组成，并且每条线存在不同的时延，通过时间差运行相同的动画，从而产生 loading 效果，估计大部分的同学可能会把 css 写成一下这样。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#loading</span> &#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">        height: 100vh;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#loading</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">        margin: 0 10px;</span><br><span class="line">        height: 30px;</span><br><span class="line">        width: 20px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">        border-radius: 5px;</span><br><span class="line">        animation-iteration-count: infinite;</span><br><span class="line">        animation-timing-function: linear;</span><br><span class="line">        animation-duration: 1s;</span><br><span class="line">        animation-name: loading;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#loading</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span></span><br><span class="line">        animation-delay: 100ms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#loading</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span></span><br><span class="line">        animation-delay: 200ms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#loading</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(4)</span> &#123;</span></span><br><span class="line">        animation-delay: 300ms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#loading</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(5)</span> &#123;</span></span><br><span class="line">        animation-delay: 400ms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="keyword">@keyframes</span> loading &#123;</span></span><br><span class="line">        0% &#123;</span><br><span class="line">            height: 30px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        50% &#123;</span><br><span class="line">            height: 120px;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"loading"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> loading = <span class="built_in">document</span>.getElementById(<span class="string">"loading"</span>),</span></span><br><span class="line"><span class="javascript">        fragment = <span class="built_in">document</span>.createDocumentFragment();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="javascript">        div.className = <span class="string">`item`</span> ;</span></span><br><span class="line">        fragment.appendChild(div);</span><br><span class="line">    &#125;</span><br><span class="line">    loading.appendChild(fragment);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分析代码发现，每个 item 只是存在 animation-delay 不同，而其余代码则完全相同，如果有 100 个 item，那岂不是要写 100 个 :nth-child。<br>显然这种方式不灵活，我们可以使用 css 变量来代替。</p><p>对于 HTML 部分的修改，让每个 item 添加一个 css 变量，对于 css 部分的修改，对规律变化的部分使用 css 变量来代替即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#loading</span> &#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">        height: 100vh;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#loading</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">        margin: 0 10px;</span><br><span class="line">        height: 30px;</span><br><span class="line">        width: 20px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">        border-radius: 5px;</span><br><span class="line">        animation: loading 1s linear var(--time) infinite;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="keyword">@keyframes</span> loading &#123;</span></span><br><span class="line">        0% &#123;</span><br><span class="line">            height: 30px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        50% &#123;</span><br><span class="line">            height: 120px;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"loading"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> loading = <span class="built_in">document</span>.getElementById(<span class="string">"loading"</span>),</span></span><br><span class="line"><span class="javascript">        fragment = <span class="built_in">document</span>.createDocumentFragment();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="javascript">        div.className = <span class="string">`item`</span> ;</span></span><br><span class="line"><span class="javascript">        div.style.setProperty(<span class="string">"--time"</span>, <span class="string">`<span class="subst">$&#123;i * <span class="number">100</span>&#125;</span>ms`</span> );</span></span><br><span class="line">        fragment.appendChild(div);</span><br><span class="line">    &#125;</span><br><span class="line">    loading.appendChild(fragment);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过巧妙的使用 css 变量，代码大大的减少了，而且灵活性也变强了(某天说加载的时间差效果不明显，直接将 100 改成 150 即可，无需对每个 :nth-child(n) 进行修改)。</p><h4 id="三、-悬浮跟踪效果"><a href="#三、-悬浮跟踪效果" class="headerlink" title="三、 悬浮跟踪效果"></a>三、 悬浮跟踪效果</h4><p>其实思路也比较简单，先对按钮进行布局和着色，然后使用伪元素标记鼠标的位置，定义 <code>--x</code> 和 <code>--y</code> 表示伪元素在按钮里的坐标位置，通过 js 获取鼠标在按钮上的 offsetLeft 和 offsetTop 分别赋值给 <code>--x</code> 和 <code>--y</code> ，再对伪元素添加径向渐变的背景颜色。</p><p><img src="/assets/blogImg/hover-button.gif" alt="hover-button"></p><p>第一步: 获取鼠标的位置，计算相对按钮的偏移位置，将坐标存到变量中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>)</span><br><span class="line">btn.addEventListener(<span class="string">'mousemove'</span>, (e) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">        offsetLeft,</span><br><span class="line">        offsetTop,</span><br><span class="line">        style</span><br><span class="line">    &#125; = e.target</span><br><span class="line">    <span class="keyword">const</span> x = e.pageX - offsetLeft,</span><br><span class="line">        y = e.pageY - offsetTop</span><br><span class="line">    style.setProperty(<span class="string">'--x'</span>, <span class="string">`<span class="subst">$&#123;x&#125;</span>px`</span> )</span><br><span class="line">    style.setProperty(<span class="string">'--y'</span>, <span class="string">`<span class="subst">$&#123;y&#125;</span>px`</span> )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>第二步：定义 <code>span</code> 元素的层级，渐变显示在文字上方，将伪元素 <code>after</code> 的 <code>width</code> 和 <code>height</code> 都默认设置为 0 (不显示)，当鼠标经过时改为 <code>300px</code> ， 并设置动画，在background 属性上应用径向渐变 <code>radial-gradient</code> ，使用。closest-side覆盖整个面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#btn</span> &#123;</span></span><br><span class="line">        width: 146px;</span><br><span class="line">        height: 46px;</span><br><span class="line">        line-height: 46px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        border-radius: 10px;</span><br><span class="line">        font-size: 18px;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#788cff</span>;</span></span><br><span class="line">        font-weight: bold;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        user-select: none;</span><br><span class="line">        position: relative;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#btn</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">        position: relative;</span><br><span class="line">        z-index: 999;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#btn</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">        content: '';</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: var(--x);</span><br><span class="line">        top: var(--y);</span><br><span class="line">        width: var(--size);</span><br><span class="line">        height: var(--size);</span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-tag">radial-gradient</span>(<span class="selector-id">#c47dde</span>, <span class="selector-tag">transparent</span>);</span></span><br><span class="line">        transform: translate(-50%, -50%);</span><br><span class="line"><span class="css">        <span class="comment">/* 让伪元素中心跟随着鼠标点 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">transition</span>: <span class="selector-tag">width</span> <span class="selector-class">.1s</span> <span class="selector-tag">ease-in-out</span>,</span></span><br><span class="line"><span class="css">                    <span class="selector-tag">height</span> <span class="selector-class">.1s</span> <span class="selector-tag">ease-in-out</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#btn</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">        --size: 300px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就这样，一个炫酷的按钮就大功告成了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、-网站换肤&quot;&gt;&lt;a href=&quot;#一、-网站换肤&quot; class=&quot;headerlink&quot; title=&quot;一、 网站换肤&quot;&gt;&lt;/a&gt;一、 网站换肤&lt;/h4&gt;&lt;p&gt;1、实现网站换肤功能，一般最先想到的是用全局 class 控制样式切换&lt;br&gt;缺点：全局控制 CSS，在项目不大，换肤样式不多的情况下，还能勉强够用。但是换肤样式很多的话，代码会非常臃肿，不利于维护。&lt;br&gt;2、通过 js 来切换引入 CSS 样式的 href 属性值，来达到样式切换的目的。&lt;br&gt;缺点：使用 js 改变 href 属性会带来加载延迟(样式文件越大，加载越久)。&lt;br&gt;3、使用 js 修改 css 变量值来达到换肤效果。&lt;/p&gt;
&lt;p&gt;今天我们要说的就是第三种, 使用 js 修改 css 变量值来达到换肤效果&lt;/p&gt;
    
    </summary>
    
    
      <category term="+ css" scheme="//sysy.site/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS 变量(variable) -- 基础篇</title>
    <link href="//sysy.site/2020/03/19/css-variable-1/"/>
    <id>//sysy.site/2020/03/19/css-variable-1/</id>
    <published>2020-03-19T13:09:00.000Z</published>
    <updated>2020-03-22T15:01:09.192Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​    css 变量可以让你不使用任何预处理器 (less, sass, stylus)，不需要通过任何工具预处理，可以原生在浏览器中使用变量</p><h4 id="一、变量的声明"><a href="#一、变量的声明" class="headerlink" title="一、变量的声明"></a>一、变量的声明</h4><p>​    声明变量的时候，变量名前要加两根连字符 <strong>(–)</strong>。<br>​<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">    <span class="attribute">--bg-color</span>: <span class="number">#f40</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>​    上面代码中，声明了一个css变量，你可能会问，为什么官方要选择两根连字符表示变量？因为 $bg-color 被 sass 用掉了，@bg-color 被 less 用掉了，所以官方为了不产生冲突，css 声明变量改用两根连字符了。</p><a id="more"></a><h4 id="二、变量的使用"><a href="#二、变量的使用" class="headerlink" title="二、变量的使用"></a>二、变量的使用</h4><p>​    css 中使用 <strong>var</strong> 函数用于读取变量 (没错，就是 js 中声明变量的那个 var，不过，此 var (css) 非比 var (js) )。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">    <span class="attribute">--bg-color</span>: <span class="number">#f40</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--bg-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>var</strong> 函数具有两个参数，第一个参数表示使用的变量，第二个参数表示默认值，那么就存在以下两种使用情况:</p><ol><li>两个参数都传递，如果变量存在，则正确引用，如果使用的变量不存在，则会使用默认值。</li><li>只传递第一个参数，且变量存在，则正确使用变量， 如果变量不存在，则默认使用失败。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    color: var(--color, #ff0); // 变量不存在，则使用默认值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意 </strong>: 变量只能用作属性值，不能用作属性名。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">--font</span>: font-size;</span><br><span class="line">    var(--font): 18px; // 无效</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、变量值的类型"><a href="#三、变量值的类型" class="headerlink" title="三、变量值的类型"></a>三、变量值的类型</h4><ol><li><p>可以是字符串</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">--content</span>: <span class="string">'hello world !!!'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    content: var(--content); // 允许</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以是数字，但是不能与单位直接连用，需要借助 <strong>calc</strong> 计算函数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">--num</span>: <span class="number">10</span>;</span><br><span class="line">    margin: var(--num)px; // 错误</span><br><span class="line">    margin: calc(var(--num) * 1px); // 正确</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="四、作用域"><a href="#四、作用域" class="headerlink" title="四、作用域"></a>四、作用域</h4><p>变量只在当前元素及其子元素中有效</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">--color</span>: <span class="selector-id">#f00</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.children</span>&#123;</span></span><br><span class="line">        color: var(--color);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">        color: var(--color); // 无效</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'parent'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'children'</span>&gt;</span>hello world !!!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'box'</span>&gt;</span>box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时只有 hello world !!! 变成了红色字体，而 box 中的元素还是黑色字体，由于这个原因一般把声明的变量放在根元素 <strong>:root</strong> 里面，以确保任何元素都可以使用它们。</p><h4 id="五、在-JS-中使用"><a href="#五、在-JS-中使用" class="headerlink" title="五、在 JS 中使用"></a>五、在 JS 中使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'box'</span>&gt;</span>box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>const box = document.getElementById(‘box’)</p><ul><li>读取变量：elem.style.getPropertyValue</li><li>设置变量：elem.style.setProperty</li><li>删除变量：elem.style.removeProperty</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置变量</span></span><br><span class="line">box.style.setProperty(<span class="string">'--color'</span>, <span class="string">'#f40'</span>)</span><br><span class="line"><span class="comment">// 读取变量</span></span><br><span class="line">box.style.getPropertyValue(<span class="string">'--color'</span>)</span><br><span class="line"><span class="comment">// 删除变量</span></span><br><span class="line">box.style.removeProperty(<span class="string">'--color'</span>)</span><br></pre></td></tr></table></figure><h4 id="六、兼容性"><a href="#六、兼容性" class="headerlink" title="六、兼容性"></a>六、兼容性</h4><p>目前现代浏览器都支持(IE 除外，毕竟微软都抛弃了 [手动狗头])</p><p><img src="/assets/blogImg/css-variable.png" alt="css变量兼容性"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;​    css 变量可以让你不使用任何预处理器 (less, sass, stylus)，不需要通过任何工具预处理，可以原生在浏览器中使用变量&lt;/p&gt;
&lt;h4 id=&quot;一、变量的声明&quot;&gt;&lt;a href=&quot;#一、变量的声明&quot; class=&quot;headerlink&quot; title=&quot;一、变量的声明&quot;&gt;&lt;/a&gt;一、变量的声明&lt;/h4&gt;&lt;p&gt;​    声明变量的时候，变量名前要加两根连字符 &lt;strong&gt;(–)&lt;/strong&gt;。&lt;br&gt;​&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:root&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;--bg-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#f40&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;​    上面代码中，声明了一个css变量，你可能会问，为什么官方要选择两根连字符表示变量？因为 $bg-color 被 sass 用掉了，@bg-color 被 less 用掉了，所以官方为了不产生冲突，css 声明变量改用两根连字符了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="//sysy.site/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>32个js代码小技巧</title>
    <link href="//sysy.site/2020/03/15/js-daimapianduan/"/>
    <id>//sysy.site/2020/03/15/js-daimapianduan/</id>
    <published>2020-03-15T07:12:00.000Z</published>
    <updated>2020-03-25T14:14:12.674Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.pixabay.com/photo/2020/03/07/09/18/landscape-4909219__340.jpg" alt="配图"></p><p>1、<strong>生成长度为 10 的随机 ID</strong></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).slice(<span class="number">2</span>) <span class="comment">// "z29mwr6neu"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>2、<strong>生成随机 16 进制颜色码</strong></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> color = <span class="string">`#<span class="subst">$&#123;<span class="built_in">Math</span>.random().toString(<span class="number">16</span>).slice(<span class="number">2</span>, <span class="number">8</span>)&#125;</span>`</span> <span class="comment">// "#3386d8"</span></span><br></pre></td></tr></table></figure><p>3、<strong>小数取整</strong></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = ~~<span class="number">2.22</span>    <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">let</span> number = <span class="number">2.11</span> | <span class="number">0</span>  <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">let</span> number = <span class="number">2.00</span> &gt;&gt; <span class="number">0</span> <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>4、<strong>两数交换</strong></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">20</span>, b = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> a = a + b; b = a - b; a = a - b</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> [a, b] = [b, a]  <span class="comment">// ES6解构</span></span><br></pre></td></tr></table></figure><p>5、<strong>深拷贝</strong></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> clone = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))  <span class="comment">// 只能用于简单数据类型，数组，对象</span></span><br></pre></td></tr></table></figure><p>6、<strong>递归求阶乘</strong></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n &gt; <span class="number">1</span>) ? n * factorial(n - <span class="number">1</span>) : n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure><p>7、<strong>求 1 - n 之和</strong></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumHander</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = arr.length</span><br><span class="line">    <span class="keyword">return</span> len * (len - <span class="number">1</span>) / <span class="number">2</span>  <span class="comment">// len * (arr[0] + arr[len - 1]) / 2</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">sumHander(arr) <span class="comment">// 45</span></span><br></pre></td></tr></table></figure><p>8、<strong>银行计数法</strong></p><ul><li><p><code>正则法</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'10000000'</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(?=(\B)(\d&#123;3&#125;)+$)/g</span></span><br><span class="line"></span><br><span class="line">str.replace(reg, <span class="string">','</span>) <span class="comment">// "10,000,000"</span></span><br></pre></td></tr></table></figure></li><li><p><code>内置函数法</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'100000000'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> arr = str.split(<span class="string">''</span>).reverse()</span><br><span class="line"><span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">prev, next, index</span>) =&gt;</span> (index % <span class="number">3</span> ? next : next + <span class="string">','</span> ) + prev)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">format(str) <span class="comment">// "100,000,000"</span></span><br></pre></td></tr></table></figure></li></ul><p>9、<strong>判断数组中的元素是否都相等</strong></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> allEqual = <span class="function"><span class="params">arr</span> =&gt;</span> arr.every(<span class="function"><span class="params">item</span> =&gt;</span> item === arr[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">allEqual([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]) <span class="comment">// true</span></span><br><span class="line">allEqual([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>10、<strong>求平均数</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> average = <span class="function">(<span class="params">...rest</span>) =&gt;</span> <span class="function">(<span class="params">rest.reduce((prev, next</span>) =&gt;</span> prev + next) / rest.length)</span><br><span class="line"></span><br><span class="line">average(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></code></pre><p>11、<strong>求字符串的字节长度</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> byteSize = <span class="function"><span class="params">str</span> =&gt;</span> <span class="keyword">new</span> Blob([str]).size</span><br><span class="line"></span><br><span class="line">byteSize(<span class="string">'Hello world'</span>) <span class="comment">// 11 </span></span><br><span class="line">byteSize(<span class="string">'你好，世界'</span>) <span class="comment">// 15 中文汉字在utf-8中到底占3个字节, 在 gbk 编码中占据2个字节</span></span><br></pre></td></tr></table></figure></code></pre><p>12、<strong>将首字母转换成大写</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toFirstUpperCase = <span class="function">(<span class="params">[first, ...rest]</span>) =&gt;</span> first.toUpperCase() + rest.join(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">toFirstUpperCase(<span class="string">'hello world'</span>) <span class="comment">// "Hello world"</span></span><br></pre></td></tr></table></figure></code></pre><p>13、<strong>将首字母转换成小写</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">const</span> toFirstLowerCase = <span class="function">(<span class="params">[first, ...rest]</span>) =&gt;</span> first.toLowerCase() + rest.join(<span class="string">''</span>)</span><br><span class="line">    </span><br><span class="line">    toFirstLowerCase(<span class="string">'Hello world'</span>) <span class="comment">// "hello world"</span></span><br><span class="line">    <span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">14、**将一个句子中的每个单词首字母转换成大写**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    `</span><span class="string">``</span>javascript</span><br><span class="line">    <span class="keyword">const</span> capitalize = <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="regexp">/\b\w/g</span>, char =&gt; char.toUpperCase())</span><br><span class="line">    </span><br><span class="line">    capitalize(<span class="string">'hello world'</span>) <span class="comment">// "Hello World"</span></span><br></pre></td></tr></table></figure></code></pre><p>15、<strong>将连字符隔开的字符串转化成小驼峰</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toSmallHump = <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="regexp">/-(\w)/g</span>, ($, $<span class="number">1</span>) =&gt; $<span class="number">1.</span>toUpperCase())</span><br><span class="line"></span><br><span class="line">toSmallHump(<span class="string">"the-first-name"</span>) <span class="comment">// "theFirstName"</span></span><br></pre></td></tr></table></figure></code></pre><p>16、<strong>移除数组中值为 <code>false</code> 的内容</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compact = <span class="function"><span class="params">arr</span> =&gt;</span> arr.filter(<span class="built_in">Boolean</span>)</span><br><span class="line"></span><br><span class="line">compact([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">NaN</span>, <span class="literal">false</span>, <span class="string">''</span>, <span class="literal">undefined</span>]) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></code></pre><p>17、<strong>统计数组中某个值出现的次数</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> occurrences = <span class="function">(<span class="params">arr, val</span>) =&gt;</span> arr.reduce(<span class="function">(<span class="params">count, item</span>) =&gt;</span> item === val ? count + <span class="number">1</span> : count , <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">occurrences([<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>], <span class="number">1</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></code></pre><p>18、<strong>返回当前天是当前年的第几天</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getCurrentDay = <span class="function"><span class="params">date</span> =&gt;</span> <span class="built_in">Math</span>.floor((date - <span class="keyword">new</span> <span class="built_in">Date</span>(date.getFullYear(), <span class="number">0</span>, <span class="number">0</span>)) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">getCurrentDay(<span class="keyword">new</span> <span class="built_in">Date</span>()) <span class="comment">// 57</span></span><br></pre></td></tr></table></figure></code></pre><p>19、<strong>获取当前几点钟</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getNowTime = <span class="function"><span class="params">date</span> =&gt;</span> date.toTimeString().slice(<span class="number">0</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">getNowTime(<span class="keyword">new</span> <span class="built_in">Date</span>()) <span class="comment">// "10:03:23"</span></span><br></pre></td></tr></table></figure></code></pre><p>20、<strong>获取两个日期之间相差多少天</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getDaysDiffBetweenDates = <span class="function">(<span class="params">dateStart, dateEnd</span>) =&gt;</span> (dateEnd - dateStart) / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">getDaysDiffBetweenDates(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-01-01'</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-02-27'</span>)) <span class="comment">// 57</span></span><br></pre></td></tr></table></figure></code></pre><p>21、<strong>获取元素对应样式</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem, prop</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(elem,<span class="literal">null</span>)[prop];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem.currenStyle[prop];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getStyle(<span class="built_in">document</span>.body, <span class="string">'padding'</span>) <span class="comment">// "0px"</span></span><br></pre></td></tr></table></figure></code></pre><p>22、<strong>获取数据类型</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getType = <span class="function"><span class="params">val</span> =&gt;</span> val === <span class="literal">undefined</span> ? <span class="string">'undefined'</span> : val === <span class="literal">null</span> ? <span class="string">'null'</span> : val.constructor.name.toLowerCase()</span><br><span class="line"></span><br><span class="line">getType([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// "array"</span></span><br><span class="line">getType(<span class="number">1</span>) <span class="comment">// "number"</span></span><br></pre></td></tr></table></figure></code></pre><p>23、<strong>在某个元素后插入元素</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> insertAfter = <span class="function">(<span class="params">targetElem, elem</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parentElement = targetElem.parentElement</span><br><span class="line">    parentElement &amp;&amp; parentElement.insertBefore(elem, targetElem.nextSibling)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">insertAfter(<span class="built_in">document</span>.querySelector(<span class="string">'div'</span>), <span class="built_in">document</span>.createElement(<span class="string">'p'</span>))</span><br></pre></td></tr></table></figure></code></pre><p>24、<strong>返回两个数组元素的交集</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> intersection = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a.filter(<span class="function"><span class="params">i</span> =&gt;</span> b.includes(i))</span><br><span class="line"></span><br><span class="line">intersection([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]) <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure></code></pre><p>25、<strong>数组扁平化</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deepFlatten = <span class="function"><span class="params">arr</span> =&gt;</span> [].concat(...arr.map(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">Array</span>.isArray(v) ? deepFlatten(v) : v))</span><br><span class="line"></span><br><span class="line">deepFlatten([<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]], <span class="number">6</span>]) <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></code></pre><p>26、<strong>数组去重</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unique = <span class="function"><span class="params">arr</span> =&gt;</span> [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line"></span><br><span class="line">unique([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]) <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></code></pre><p>27、<strong>将度数转成弧度</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> degToRad = <span class="function"><span class="params">deg</span> =&gt;</span> (deg * <span class="built_in">Math</span>.PI) / <span class="number">180</span></span><br><span class="line"></span><br><span class="line">degToRad(<span class="number">90</span>) <span class="comment">// 1.5707963267948966</span></span><br></pre></td></tr></table></figure></code></pre><p>28、<strong>将数字拆分成数组</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> digitize = <span class="function"><span class="params">num</span> =&gt;</span> [...<span class="string">`<span class="subst">$&#123;num&#125;</span>`</span>].map(<span class="function"><span class="params">i</span> =&gt;</span> <span class="built_in">parseInt</span>(i))</span><br><span class="line"></span><br><span class="line">digitize(<span class="number">123</span>) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></code></pre><p>29、<strong>计算两点之间的距离</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> distance = <span class="function">(<span class="params">x, y, x1, y1</span>) =&gt;</span> <span class="built_in">Math</span>.hypot(x1- x, y1 - y)</span><br><span class="line"></span><br><span class="line">distance(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>) <span class="comment">// 1.4142135623730951</span></span><br></pre></td></tr></table></figure></code></pre><p>30、<strong>按照给定的函数条件筛选数组，将最后一个满足条件的元素进行删除</strong> </p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> findLast = <span class="function">(<span class="params">arr, fn</span>) =&gt;</span> arr.filter(fn).pop()</span><br><span class="line"></span><br><span class="line">findLast([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], n =&gt; n % <span class="number">2</span> === <span class="number">0</span>) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></code></pre><p>31、<strong>判断一个对象是否为空</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isObjectEmpty = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">Object</span>.keys(obj).length === <span class="number">0</span></span><br><span class="line"></span><br><span class="line">isObjectEmpty(&#123;&#125;) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></code></pre><p>32、<strong>错误处理代码(有错自动搜索，手动滑稽)</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">// your code</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">window</span>.open(<span class="string">`https://stackoverflow.com/search?q=<span class="subst">$&#123;<span class="built_in">String</span>(error)&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.pixabay.com/photo/2020/03/07/09/18/landscape-4909219__340.jpg&quot; alt=&quot;配图&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、&lt;strong&gt;生成长度为 10 的随机 ID&lt;/strong&gt;&lt;/p&gt;
   &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; id = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random().toString(&lt;span class=&quot;number&quot;&gt;36&lt;/span&gt;).slice(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// &quot;z29mwr6neu&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="//sysy.site/tags/javascript/"/>
    
      <category term="js技巧" scheme="//sysy.site/tags/js%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
</feed>
