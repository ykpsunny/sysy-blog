<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sunny的博客</title>
  <icon>https://www.gravatar.com/avatar/19bada5bb5e517ac754b01b5f33e9b22</icon>
  <subtitle>越努力，越幸运</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//sysy.site/"/>
  <updated>2020-05-17T02:33:46.173Z</updated>
  <id>//sysy.site/</id>
  
  <author>
    <name>Sunny</name>
    <email>2309456411@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS 字典</title>
    <link href="//sysy.site/2020/05/16/js-zidian/"/>
    <id>//sysy.site/2020/05/16/js-zidian/</id>
    <published>2020-05-16T11:20:00.000Z</published>
    <updated>2020-05-17T02:33:46.173Z</updated>
    
    <content type="html"><![CDATA[<p>最近朋友问我一道题目, 所以打算记录下, 题目如下:<br>  给定一个 “扁平化” 字典对象, 其键以点分隔。例如: {‘A’: 1, ‘B. A’: 2, ‘B. B’: 3, ‘C. D. E’: 4, ‘C. D. F’: 5}。实现将其转换为 <strong>嵌套</strong> 字典对象的功能。在上述的描述情况下，嵌套版本如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  A: <span class="number">1</span>, </span><br><span class="line">  B: &#123;</span><br><span class="line">    A: <span class="number">2</span>,</span><br><span class="line">    B: <span class="number">3</span></span><br><span class="line">  &#125;, </span><br><span class="line">  C: &#123;</span><br><span class="line">    D: &#123;</span><br><span class="line">      E: <span class="number">4</span>,</span><br><span class="line">      F: <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="string">"A"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">"B.A"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">"B.B"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">"C.D.E"</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="string">"C.D.F"</span>: <span class="number">5</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dictionaries</span>(<span class="params">origin, target = &#123;&#125;</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">assemble</span>(<span class="params">origin, prop, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = prop.indexOf(<span class="string">"."</span>);</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">-1</span>) &#123;</span><br><span class="line">      origin[prop] = value;</span><br><span class="line">      <span class="keyword">return</span> origin;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> key = prop.slice(<span class="number">0</span>, index);</span><br><span class="line">    origin[key] = &#123;</span><br><span class="line">      ...origin[key],</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> assemble(origin[key], prop.slice(index + <span class="number">1</span>), value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(prop)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (prop.indexOf(<span class="string">"."</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        assemble(target, prop, obj[prop]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        target[prop] = obj[prop];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dictionaries(obj)</span><br></pre></td></tr></table></figure><p>解题思路: 判断 key 是否包含 <strong>.</strong>，如果包含，则按 <strong>.</strong> 来切割，进行递归</p><p>上面是转成嵌套版本的，那从 <strong>嵌套</strong> 版本转成 <strong>扁平</strong> 版本呢 ? 实现方式如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  A: <span class="number">1</span>, </span><br><span class="line">  B: &#123;</span><br><span class="line">    A: <span class="number">2</span>,</span><br><span class="line">    B: <span class="number">3</span></span><br><span class="line">  &#125;, </span><br><span class="line">  C: &#123;</span><br><span class="line">    D: &#123;</span><br><span class="line">      E: <span class="number">4</span>,</span><br><span class="line">      F: <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fromdictionaries</span>(<span class="params">origin, target = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> toString = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">flatAssemble</span>(<span class="params">target, key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (toString.call(value) !== <span class="string">"[object Object]"</span>) &#123;</span><br><span class="line">      target[key] = value;</span><br><span class="line">      <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> value) &#123;</span><br><span class="line">      <span class="keyword">if</span> (value.hasOwnProperty(prop)) &#123;</span><br><span class="line">        flatAssemble(target, key + <span class="string">"."</span> + prop, value[prop]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(prop)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (toString.call(obj[prop]) === <span class="string">"[object Object]"</span>) &#123;</span><br><span class="line">        flatAssemble(target, prop, obj[prop]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        target[prop] = obj[prop];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fromdictionaries(obj) <span class="comment">// &#123;A: 1, B.A: 2, B.B: 3, C.D.E: 4, C.D.F: 5&#125;</span></span><br></pre></td></tr></table></figure><p>解题思路: 判读 value 是否是对象，如果是的话，把 key 进行拼接, 然后进行递归</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近朋友问我一道题目, 所以打算记录下, 题目如下:&lt;br&gt;  给定一个 “扁平化” 字典对象, 其键以点分隔。例如: {‘A’: 1, ‘B. A’: 2, ‘B. B’: 3, ‘C. D. E’: 4, ‘C. D. F’: 5}。实现将其转换为 &lt;strong&gt;嵌套&lt;/strong&gt; 字典对象的功能。在上述的描述情况下，嵌套版本如下:&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  A: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  B: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    B: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  C: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    D: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      E: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      F: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="+ js" scheme="//sysy.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>绚丽的 CSS</title>
    <link href="//sysy.site/2020/04/29/css-xuanli/"/>
    <id>//sysy.site/2020/04/29/css-xuanli/</id>
    <published>2020-04-29T13:18:00.000Z</published>
    <updated>2020-05-17T07:41:00.670Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、tooltip"><a href="#一、tooltip" class="headerlink" title="一、tooltip"></a>一、tooltip</h3><p>  利用 css 的 attr 函数获取 js 动态定义的文本，var 函数获取动态定义的颜色值，简单实用。<br><img src="/assets/blogImg/tooltips.gif" alt="tooltip"></p><p><a href="https://github.com/ykpsunny/tooltip" target="_blank" rel="noopener">源码地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、tooltip&quot;&gt;&lt;a href=&quot;#一、tooltip&quot; class=&quot;headerlink&quot; title=&quot;一、tooltip&quot;&gt;&lt;/a&gt;一、tooltip&lt;/h3&gt;&lt;p&gt;  利用 css 的 attr 函数获取 js 动态定义的文本，var 函数获取动态
      
    
    </summary>
    
    
      <category term="+ css" scheme="//sysy.site/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>盘点 CSS 中的方法</title>
    <link href="//sysy.site/2020/04/25/css-function/"/>
    <id>//sysy.site/2020/04/25/css-function/</id>
    <published>2020-04-25T12:20:00.000Z</published>
    <updated>2020-04-28T07:53:20.394Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>随着 web3. 0 时代的到来，CSS 语言越来越强大，能实现的功能也比我们想象的要多，以前需要借助 JavaScript 才能完成的事情，现在使用纯 CSS 就能完成，在这篇文章中盘点 CSS 中的函数。</p><h3 id="一、var"><a href="#一、var" class="headerlink" title="一、var"></a>一、var</h3><p>  var 函数使得可以在 CSS 使用变量</p><p>使用:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="comment">/* 定义变量 */</span></span><br><span class="line">  <span class="attribute">--bg-color</span>: <span class="number">#f40</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/* 使用变量 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--bg-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="/2020/03/19/css-variable-1">点击查看 var 的详细使用</a></p><a id="more"></a><h3 id="一、calc"><a href="#一、calc" class="headerlink" title="一、calc"></a>一、calc</h3><p>  在 CSS 中，calc()可以说是一个计算函数，我们可以在里面运行我们的表达式。</p><p>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(expression);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/* 加 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">20px</span> + <span class="number">2em</span>);</span><br><span class="line">  <span class="comment">/* 减 */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">200px</span>);</span><br><span class="line">  <span class="comment">/* 乘 */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="built_in">calc</span>(<span class="number">20</span> * <span class="number">20em</span>);</span><br><span class="line">  <span class="comment">/* 除 */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="built_in">calc</span>(<span class="number">40em</span> / <span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>规则:</p><ul><li>可以使用px、em、rem、百分比(%)等单位</li><li>可以使用 <code>+</code> 、 <code>-</code> 、 <code>*</code> 和 <code>/</code> 进行四则运算</li><li>如果为 <code>+</code> 或 <code>-</code> 时，两边必须要有空格，否则无效， <code>*</code> 或 <code>/</code> 可以省略</li></ul><h3 id="二、filter"><a href="#二、filter" class="headerlink" title="二、filter"></a>二、filter</h3><p>  在css中，filter 其实是一个属性，他的值是函数，用来做各种滤镜效果的。</p><p>  清明节那天，为了纪念因为疫情牺牲的医护，公安等工作人员，很多网站都做了灰色效果，在 filter 属性出现之前，为了达到这种灰色效果，需要花费大量的人力来做这件事，在出现 filter 属性之后，一行代码就能解决这个效果。</p><p>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="comment">/* 灰色效果 */</span></span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">/* 模糊效果 */</span></span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">20px</span>);</span><br><span class="line">  <span class="comment">/* 透明效果, 跟 opacity 属性类似 */</span></span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">opacity</span>(<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、attr"><a href="#三、attr" class="headerlink" title="三、attr"></a>三、attr</h3><p>  attr 可以获取 html 结构上的属性值</p><p>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(attribute);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">    content: attr(data-content);</span><br><span class="line"><span class="css">    <span class="comment">/* content: attr(class); */</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'box'</span> <span class="attr">data-content</span>=<span class="string">'content'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="四、linear-gradient-与-radial-gradient"><a href="#四、linear-gradient-与-radial-gradient" class="headerlink" title="四、linear-gradient 与 radial-gradient"></a>四、linear-gradient 与 radial-gradient</h3><p>  可以让你在两个或多个指定的颜色之间显示平稳的过渡的颜色。<br>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(direction, color-stop1, color-stop2, ...);</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(shape, start-color, ..., last-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">right</span>, <span class="selector-id">#f40</span>, <span class="selector-id">#ff0</span>, <span class="selector-id">#0ff</span>);</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-image</span>: <span class="selector-tag">radial-gradient</span>(<span class="selector-tag">circle</span>, <span class="selector-id">#f40</span>, <span class="selector-id">#ff0</span>, <span class="selector-id">#0ff</span>);</span></span><br><span class="line">    min-height: 200px;</span><br><span class="line">    min-width: 200px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'box'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="五、repeating-linear-gradient-与-repeating-radial-gradient"><a href="#五、repeating-linear-gradient-与-repeating-radial-gradient" class="headerlink" title="五、repeating-linear-gradient 与 repeating-radial-gradient"></a>五、repeating-linear-gradient 与 repeating-radial-gradient</h3><p>  用于重复线性渐变</p><p>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">repeating-linear-gradient</span>(color1, color2 <span class="number">5%</span>, color3 <span class="number">10%</span>);</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">repeating-radial-gradient</span>(color1, color2 <span class="number">5%</span>, color3 <span class="number">10%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-image</span>: <span class="selector-tag">repeating-linear-gradient</span>(<span class="selector-id">#f40</span>, <span class="selector-id">#ff0</span> 5%, <span class="selector-id">#0ff</span> 10%);</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-image</span>: <span class="selector-tag">repeating-radial-gradient</span>(<span class="selector-id">#f40</span>, <span class="selector-id">#ff0</span> 5%, <span class="selector-id">#0ff</span> 10%);</span></span><br><span class="line">    height: 400px;</span><br><span class="line">    width: 400px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">data-content</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="六、cubic-bezier"><a href="#六、cubic-bezier" class="headerlink" title="六、cubic-bezier"></a>六、cubic-bezier</h3><p>  贝塞尔曲线函数，一般用于动画节奏感设置</p><p>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> <span class="built_in">cubic-bezier</span>(x1, y1, x2, y2);</span><br><span class="line">  <span class="comment">/* x1, y1, x2, y2 必须是0到1之间的数字 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f40</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.5s</span> <span class="selector-tag">cubic-bezier</span>(0<span class="selector-class">.14</span>, 0<span class="selector-class">.59</span>, 0<span class="selector-class">.51</span>, 0<span class="selector-class">.94</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 400px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="七、rgb"><a href="#七、rgb" class="headerlink" title="七、rgb"></a>七、rgb</h3><p>  使用红 - 绿 - 蓝(三原色)定义颜色，Alpha 指定颜色的不透明度。</p><p>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(red, green, blue);</span><br><span class="line">  <span class="comment">/* red, grenn, blue 都是 0 - 255 的数值，或者 0% - 100% 的百分比值 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">    color: rgb(0, 255, 255);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="八、rgba"><a href="#八、rgba" class="headerlink" title="八、rgba"></a>八、rgba</h3><p>  在 rgb 的基础上加了 Alpha, 用于指定颜色的不透明度。</p><p>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(red, green, blue, alpha);</span><br><span class="line">  <span class="comment">/* alpha 用于指定颜色的不透明度, 取值范围 0 - 1, 值越小，颜色就越透明 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(0, 255, 255, 0<span class="selector-class">.1</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;随着 web3. 0 时代的到来，CSS 语言越来越强大，能实现的功能也比我们想象的要多，以前需要借助 JavaScript 才能完成的事情，现在使用纯 CSS 就能完成，在这篇文章中盘点 CSS 中的函数。&lt;/p&gt;
&lt;h3 id=&quot;一、var&quot;&gt;&lt;a href=&quot;#一、var&quot; class=&quot;headerlink&quot; title=&quot;一、var&quot;&gt;&lt;/a&gt;一、var&lt;/h3&gt;&lt;p&gt;  var 函数使得可以在 CSS 使用变量&lt;/p&gt;
&lt;p&gt;使用:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:root&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* 定义变量 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;--bg-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#f40&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* 使用变量 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt;(--bg-color);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;/2020/03/19/css-variable-1&quot;&gt;点击查看 var 的详细使用&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="+ CSS" scheme="//sysy.site/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 中常见的布局</title>
    <link href="//sysy.site/2020/04/24/css-buju/"/>
    <id>//sysy.site/2020/04/24/css-buju/</id>
    <published>2020-04-24T13:20:00.000Z</published>
    <updated>2020-04-26T15:31:28.999Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、单列布局"><a href="#一、单列布局" class="headerlink" title="一、单列布局"></a>一、单列布局</h3><p>header 与 footer 等宽沾满全屏, body 略窄的单列布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.header</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">    height: 60px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.body</span> &#123;</span></span><br><span class="line">    width: 80%;</span><br><span class="line">    margin: auto;</span><br><span class="line">    min-height: calc(100vh - 120px);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="二、两列自适应布局"><a href="#二、两列自适应布局" class="headerlink" title="二、两列自适应布局"></a>二、两列自适应布局</h3><p>两列自适应布局是指一列宽度固定，另一列撑满剩余宽度的布局方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.body</span> &#123;</span></span><br><span class="line">    display: flex;</span><br><span class="line">    min-height: 100vh;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.aside</span> &#123;</span></span><br><span class="line">    width: 200px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">    width: calc(100vw - 200px);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">"aside"</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、三栏布局"><a href="#三、三栏布局" class="headerlink" title="三、三栏布局"></a>三、三栏布局</h3><p>中间列自适应宽度，旁边两侧固定宽度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.body</span> &#123;</span></span><br><span class="line">    display: flex;</span><br><span class="line">    min-height: 100vh;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.col-left</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.col-right</span> &#123;</span></span><br><span class="line">    width: 200px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.col-center</span> &#123;</span></span><br><span class="line">    width: calc(100% - 400px);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-center"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><p>比较特殊的三栏布局，同样也是两边固定宽度，中间自适应，唯一区别结构必须是先写中间列部分，这样实现中间列可以优先加载。</p><p>实现方式: </p><ul><li>三个部分都设定为左浮动，然后设置 col-center 的宽度为 100%(实现中间列内容自适应)，此时，col-left 和 col-right 部分会被挤到下一行</li><li>通过设置 margin-left 为负值让 col-left 和 col-right 部分回到与 col-center 部分同一行</li><li>然后通过设置父容器的 padding-left 和 padding-right，让左右两边留出间隙。</li><li>最后通过设置相对定位，让 left 和 right 部分移动到两侧。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.body</span> &#123;</span></span><br><span class="line">    padding: 0 200px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.col-left</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.col-right</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.col-center</span> &#123;</span></span><br><span class="line">    float: left;</span><br><span class="line">    min-height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.col-left</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.col-right</span> &#123;</span></span><br><span class="line">    width: 200px;</span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.col-center</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.col-left</span> &#123;</span></span><br><span class="line">    left: -200px;</span><br><span class="line"><span class="css">    <span class="comment">/* margin 负数值比较大的话会一直移动到上一行 */</span></span></span><br><span class="line">    margin-left: -100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.col-right</span> &#123;</span></span><br><span class="line">    margin-right: -200px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-center"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h3><p>为了解决圣杯布局宽度较小时，左右两列挤下去，以及中间部分不显示的问题。<br>设置父容器的最小宽度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.body</span> &#123;</span></span><br><span class="line">    padding: 0 200px;</span><br><span class="line"><span class="css">    <span class="comment">/* 设置父容器的最小宽度，显示中间部分 */</span></span></span><br><span class="line">    min-width: 400px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.col-left</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.col-right</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.col-center</span> &#123;</span></span><br><span class="line">    float: left;</span><br><span class="line">    position: relative;</span><br><span class="line">    min-height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.col-left</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.col-right</span> &#123;</span></span><br><span class="line">    width: 200px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.col-center</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f00</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.col-left</span> &#123;</span></span><br><span class="line">    left: -200px;</span><br><span class="line"><span class="css">    <span class="comment">/* margin 负数值比较大的话会一直移动到上一行 */</span></span></span><br><span class="line">    margin-left: -100%;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.col-right</span> &#123;</span></span><br><span class="line">    margin-right: -200px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#0ff</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、单列布局&quot;&gt;&lt;a href=&quot;#一、单列布局&quot; class=&quot;headerlink&quot; title=&quot;一、单列布局&quot;&gt;&lt;/a&gt;一、单列布局&lt;/h3&gt;&lt;p&gt;header 与 footer 等宽沾满全屏, body 略窄的单列布局&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;  &lt;span class=&quot;selector-class&quot;&gt;.header&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;  &lt;span class=&quot;selector-class&quot;&gt;.footer&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 60px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;  &lt;span class=&quot;selector-class&quot;&gt;.body&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 80%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    margin: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    min-height: calc(100vh - 120px);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;header&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;body&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;footer&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;footer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="+ CSS" scheme="//sysy.site/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 中常见的单位</title>
    <link href="//sysy.site/2020/04/20/css-danwei/"/>
    <id>//sysy.site/2020/04/20/css-danwei/</id>
    <published>2020-04-20T13:20:00.000Z</published>
    <updated>2020-05-17T07:50:22.950Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  CSS 中有很多用于表式长度的单位, 比如常见的 px, em, rem等等。单位又分绝对单位与相对单位, 数字与单位之间不能出现空格。如果长度值为 0，则可以省略单位。对于一些 CSS 属性，长度可以是负数。</p><h3 id="绝对单位"><a href="#绝对单位" class="headerlink" title="绝对单位"></a>绝对单位</h3><p>  绝对长度单位是一个固定值, 它反映的是一个真实的物理尺寸, 不会因为其他元素的尺寸变化而变化</p><p><strong>px</strong><br>  px是一个绝对单位，但是由于各种设备的 dpi(分辨率) 不同，每1个 CSS 像素所代表的物理像素是可以变化的，所以 px 也有其相对性(相对于分辨率)。</p><a id="more"></a><h3 id="相对单位"><a href="#相对单位" class="headerlink" title="相对单位"></a>相对单位</h3><p><strong>em</strong><br>  em 的值并不是固定的, 而是由其他的元素来决定的相对值, em 会继承父级元素的字体大小(font-size), 表示自身字体大小(font-size具有继承性, 如果自身没有设置 font-size 则继承自父级)。<br>计算规则: 1 ÷ 父元素的font-size × 需要转换的 px 值 = em 值</p><p><strong>rem</strong><br>  rem 是相对根节点 html 的字体大小(font-size)来计算, 一般用于移动端布局, 根据不同的窗口大小, 来计算根元素的字体大小, 以提高用户视觉体验。<br>计算规则: 1 ÷ 根元素(html)font-size × 需要转换的 px 值 = em 值</p><p><strong>vw</strong><br>  表示 Viewpoint Width (视口宽度) 百分比。1vw 代表视口宽度的 1%。例如，如果视口的宽度是 1920px, 10vh求得的值为 192px。</p><p><strong>vh</strong><br>  表示 Viewpoint Height (视口高度) 百分比。1vh 代表视口高度的 1%。例如，如果视口的高度是 800px, 1vh求得的值为 8px。 </p><p><strong>vmin</strong><br>  表示 vm 和 vh 中较小的那个。</p><p><strong>vmax</strong><br>  表示 vm 和 vh 中较大的那个。</p><p><img src="/assets/blogImg/vw-vh.png" alt="vw-vh"></p><p>vh 和vw 总是与视口的高度和宽度有关，与之不同的，vmin 和vmax 是与视口宽度和高度的最大值或最小值有关，取决于哪个更大和更小。例如，如果视口的宽为 1440px、高为 660px，10vmin 为 66px, 10vmax 为 144px。</p><p><strong>百分比(%)</strong><br>  CSS中的百分比参照的值不同, 最终计算出来的值也是不同的。</p><ul><li><p>正常情况下，百分比设置宽高一般参照的都是父级的宽高 (不包含 padding, margin, border)，比如父级宽度 <code>500px</code>, 高度 <code>300px</code>, <code>padding: 20px</code>, 子集(width: 50%, height: 50%)的宽为 <code>250px</code>, 高为 <code>150px</code>，如果父级没有显示的设置宽高, 则子集的高度为 <strong>0</strong>。<br>注: 参照宽度为 width || height，不区分盒模型</p></li><li><p>定位情况下，如果子集 <code>position: absolute</code>, 则参照最近定位不是 <code>static</code> 的父级的宽高 (不包含 margin, border), 如果一直到根元素都没有定位的话, 则参照的是第一屏可视区的宽高, 如果子集 <code>position: fixed</code>，则参照的是第一屏可视区的高度与宽度<br>注: 参照宽度为 width + padding || height + padding，不区分盒模型</p></li></ul><p>translateX()的百分比相对于自身的 <code>width + padding + border</code> 来计算<br>translateY()的百分比相对于自身的 <code>height + padding + border</code> 来计算</p><p>巧妙使用<strong>百分比(%)</strong>实现水平垂直居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">    width: 500px;</span><br><span class="line">    height: 300px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f00</span>;</span></span><br><span class="line">    padding: 20px;</span><br><span class="line">    position: relative;</span><br><span class="line">    border: 10px solid black;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 50%;</span><br><span class="line">    border: 10px solid black;</span><br><span class="line">    padding: 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#0ff</span>;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 50%;</span><br><span class="line">    top: 50%;</span><br><span class="line">    transform: translate(-50%, -50%);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/css-center.png" alt="css-center"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;  CSS 中有很多用于表式长度的单位, 比如常见的 px, em, rem等等。单位又分绝对单位与相对单位, 数字与单位之间不能出现空格。如果长度值为 0，则可以省略单位。对于一些 CSS 属性，长度可以是负数。&lt;/p&gt;
&lt;h3 id=&quot;绝对单位&quot;&gt;&lt;a href=&quot;#绝对单位&quot; class=&quot;headerlink&quot; title=&quot;绝对单位&quot;&gt;&lt;/a&gt;绝对单位&lt;/h3&gt;&lt;p&gt;  绝对长度单位是一个固定值, 它反映的是一个真实的物理尺寸, 不会因为其他元素的尺寸变化而变化&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;px&lt;/strong&gt;&lt;br&gt;  px是一个绝对单位，但是由于各种设备的 dpi(分辨率) 不同，每1个 CSS 像素所代表的物理像素是可以变化的，所以 px 也有其相对性(相对于分辨率)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="+ CSS" scheme="//sysy.site/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>两数之和、洗牌、数组中的第 K 个最大元素、爬楼梯</title>
    <link href="//sysy.site/2020/04/12/algorithm-1/"/>
    <id>//sysy.site/2020/04/12/algorithm-1/</id>
    <published>2020-04-12T07:20:00.000Z</published>
    <updated>2020-04-23T14:29:04.425Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、两数之和"><a href="#1、两数之和" class="headerlink" title="1、两数之和"></a>1、两数之和</h4><p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code> , 请你在该数组中找出和为目标值的那两个整数, 并返回他们的数组下标。</p><p>可以假设每种入只会对应一个答案。</p><p><strong>示例:</strong></p><p>给定 nums = [1, 3, 5, 6, 11], target = 7 </p><p>因为nums[0] + nums[3] = 1 + 6 = 7<br>所以返回[0, 3]</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findSumIndex</span>(<span class="params">arr, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] + arr[j] === target) &#123;</span><br><span class="line">        <span class="keyword">return</span> [i, j]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">findSumIndex([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>], <span class="number">7</span>) <span class="comment">// [0, 3]</span></span><br></pre></td></tr></table></figure><h4 id="2、洗牌算法"><a href="#2、洗牌算法" class="headerlink" title="2、洗牌算法"></a>2、洗牌算法</h4><ul><li><p>交换打乱</p><p>其基本思想就是从原始数组中随机取一个之前没取过的数字与最后一个数字交换位置</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> newArr = arr.slice()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = newArr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> rmdIndex = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * i) <span class="comment">// 随机取一个下标</span></span><br><span class="line">    <span class="comment">// 两数交换</span></span><br><span class="line">    <span class="keyword">const</span> temp = newArr[i]</span><br><span class="line">    newArr[i] = newArr[rmdIndex]</span><br><span class="line">    newArr[rmdIndex] = temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line">shuffle([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]) <span class="comment">// [7, 4, 2, 1, 8, 5, 6, 3]</span></span><br></pre></td></tr></table></figure><ul><li><p>随机打乱</p><p>利用数组 <code>sort</code> 方法的函数参数特性<br>参数为函数时:</p><ol><li>可以有参数（两个参数排序），也可以没有参数（乱序）</li><li>看返回值</li></ol></li></ul><pre><code>- 当返回值为负数时，那么前面的数放在前面- 当返回值为正数时，那么后面的数放在前面- 为0时，不动</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">arr.sort(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>) <span class="comment">// [2, 7, 5, 1, 8, 3, 6, 4]</span></span><br></pre></td></tr></table></figure><h4 id="3、数组中的第K个最大元素"><a href="#3、数组中的第K个最大元素" class="headerlink" title="3、数组中的第K个最大元素"></a>3、数组中的第K个最大元素</h4><p>  在未排序的数组中找到第 <code>K</code> 个最大的元素。<br>  注意: 需要找到是数组排序后的第 <code>K</code> 个最大的元素，而不是第 K 个不同的元素。</p><p>  示例 1:</p><pre><code>输入: [2, 3, 1, 4, 5] 和 k = 3输出: 3</code></pre><p>  示例 2:</p><pre><code>输入: [3, 2, 3, 4, 1, 4, 5, 6, 7, 6] 和 k = 3输出: 6</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">6</span>],</span><br><span class="line">  k = <span class="number">3</span></span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> baseItem = arr.splice(<span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>), <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">const</span> left = [],</span><br><span class="line">    right = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    baseItem &gt; arr[i] ? left.push(arr[i]) : right.push(arr[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> quickSort(right).concat(baseItem, quickSort(left))</span><br><span class="line">&#125;</span><br><span class="line">quickSort()[k - <span class="number">1</span>] <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a)[k - <span class="number">1</span>] <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h4 id="4、爬楼梯"><a href="#4、爬楼梯" class="headerlink" title="4、爬楼梯"></a>4、爬楼梯</h4><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p>注意：给定 n 是一个正整数。</p><p>示例 1:</p><p>  输入： 2<br>  输出： 2<br>  解释： 有两种方法可以爬到楼顶。</p><ol><li>1 + 1</li><li>2</li></ol><p>示例 2:</p><p>  输入： 4<br>  输出： 5<br>  解释： 有三种方法可以爬到楼顶。</p><ol><li>1 + 1 + 1 + 1</li><li>1 + 1 + 2</li><li>1 + 2 + 1</li><li>2 + 1 + 1</li><li>2 + 2</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">climbStairs</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">4</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    arr[i] = arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr[n]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 递归法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">climbStairs</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> climbStairs(n - <span class="number">1</span>) + climbStairs(n - <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">climbStairs(<span class="number">4</span>) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1、两数之和&quot;&gt;&lt;a href=&quot;#1、两数之和&quot; class=&quot;headerlink&quot; title=&quot;1、两数之和&quot;&gt;&lt;/a&gt;1、两数之和&lt;/h4&gt;&lt;p&gt;给定一个整数数组 &lt;code&gt;nums&lt;/code&gt; 和一个目标值 &lt;code&gt;target&lt;/code&gt; , 请你在该数组中找出和为目标值的那两个整数, 并返回他们的数组下标。&lt;/p&gt;
&lt;p&gt;可以假设每种入只会对应一个答案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定 nums = [1, 3, 5, 6, 11], target = 7 &lt;/p&gt;
&lt;p&gt;因为nums[0] + nums[3] = 1 + 6 = 7&lt;br&gt;所以返回[0, 3]&lt;/p&gt;
    
    </summary>
    
    
      <category term="+ 算法题" scheme="//sysy.site/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>immer的使用</title>
    <link href="//sysy.site/2020/04/06/immer/"/>
    <id>//sysy.site/2020/04/06/immer/</id>
    <published>2020-04-06T06:21:00.000Z</published>
    <updated>2020-04-12T07:36:03.205Z</updated>
    
    <content type="html"><![CDATA[<p>JS 里面的变量类型可以分为 <code>基本类型</code> 和 <code>引用类型</code> ，在 JS 中使用引用类型数据时需要格外的注意引用问题，不然，一不小心就踩坑了！！！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line">b = <span class="number">5</span></span><br><span class="line"><span class="built_in">console</span>.log(a === b) <span class="comment">// ?</span></span><br></pre></td></tr></table></figure><p>上面的 <code>**a**</code> 跟 <code>**b**</code> 会相对吗，因为是基本型数据，所以肯定是 <strong>false</strong></p><p>那我们改成引用类型呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = obj</span><br><span class="line">obj1.a = <span class="number">5</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.a) <span class="comment">// ?</span></span><br></pre></td></tr></table></figure><p>此时应该打印多少？10 还是 5，答案是 5，why？我刚刚明明修改的是 obj1，为什么会影响到 obj 呢，因为对象赋值本质上是把地址赋值给 obj1，并不是把 obj 中的内容赋值给 obj1，这样做是为了节约内存，但是在实际的生产过程当中这样的设计会引发无穷无尽的问题，所以我们要解决这种相互引用的问题。</p><p>为了解决互相引用的问题ES6提供了 Object.assign，展开运算符 <code>...</code> </p><a id="more"></a><p><strong>Object.assign 与 <code>...</code> 运算符</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    b: <span class="string">'b'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  ...obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let obj1 = Object.assign(&#123;&#125;, obj)</span></span><br><span class="line">obj1.a.b = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.a.b) <span class="comment">// ？</span></span><br></pre></td></tr></table></figure><p>此处打印的是 10，因为 <code>...</code> 或 Object.assign 只做了浅层拷贝，对于深层的内容本质上还是相同的引用，所以修改 obj1.a.b 还是会影响到 obj，所以只能深层拷贝，彻底解决引用问题</p><p><strong>深拷贝 — deepClone</strong></p><p>  深拷贝，顾名思义就是，在遍历赋值的过程中，如果遇到了引用类型的值，就递归创建一个新的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deepClone = <span class="function">(<span class="params">origin</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> target = <span class="built_in">Array</span>.isArray(origin) ? [] : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> origin) &#123;</span><br><span class="line">    <span class="keyword">if</span> (origin.hasOwnProperty(prop)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (origin[prop] !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> origin[prop] === <span class="string">'object'</span>) &#123;</span><br><span class="line">        target[prop] = deepClone(origin[prop])</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        target[prop] = origin[prop]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    b: <span class="string">'b'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = deepClone(obj)</span><br><span class="line">obj1.a.b = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.a.b) <span class="comment">// 'b'</span></span><br></pre></td></tr></table></figure><p>上面的这个 deepClone 可以满足简单的需求，但是真正在生产工作中，我们需要考虑非常多的因素。</p><p>比如：对象之间的循环引用问题，值为 Symbol 类型的数据时，原型链上的内容如何处理，等一系列问题。</p><p>因为有太多不确定因素，所以在真正的生产环境中，还是推荐大家使用开源工具库 <strong>loadsh</strong> 中的 <code>cloneDeep</code> 。</p><p>深拷贝的问题在于给每一个数据都做了拷贝，会浪费内存，所以还是要借助 immer 或 immutable-js 来做性能优化。</p><p><strong>immer</strong></p><p>immer 是一个以 ES6 中 Proxy 为核心的 immutable 库，几乎以最小的成本 (压缩之后仅 3KB) 实现了 js 的不可变数据结构，简单易用 (API 不多，而且使用原生的数据类型)，满足了我们对JS不可变数据结构的需求。</p><p>GitHub 地址: <a href="https://immerjs.github.io/immer" target="_blank" rel="noopener">https://immerjs.github.io/immer</a></p><p>安装:<br>  yarn: yarn add immer –save<br>  npm: npm i immer –save</p><p>使用:</p><ul><li>用法一:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> produce <span class="keyword">from</span> <span class="string">'immer'</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    b: <span class="string">'b'</span></span><br><span class="line">  &#125;</span><br><span class="line">  c: &#123;</span><br><span class="line">    text: <span class="string">'c'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = produce(obj, (draftState) =&gt; &#123;</span><br><span class="line">  draftState.a.b = <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.a.b) <span class="comment">// 'b'</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1.a.b) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.c === obj1.c) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>  通过上面的用法我们能发现，所有具有副作用的逻辑都可以放进 produce 的第二个参数的函数内部进行处理。在这个函数内部对数据进行任何操作，都不会对原对象产生任何影响。<br>  在不影响的同时，未修改的部分，还保持着相应的关联。</p><ul><li>用法二:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> produce <span class="keyword">from</span> <span class="string">'immer'</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    b: <span class="string">'b'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> producer = produce(<span class="function"><span class="params">draftState</span> =&gt;</span> &#123;</span><br><span class="line">  draftState.a.b = <span class="number">10</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = producer(obj)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.a.b) <span class="comment">// 'b'</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1.a.b) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.c === obj1.c) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>  先传入一个要操作对象的函数，利用高阶函数的特点，返回一个生产者，然后传入需要修改的对象即可。</p><p><strong>在 React 中使用</strong></p><p>有如下数据:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state = &#123;</span><br><span class="line">  userList: [&#123;</span><br><span class="line">      id: <span class="number">0</span>,</span><br><span class="line">      name: <span class="string">"zs"</span>,</span><br><span class="line">      age: <span class="number">18</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      id: <span class="number">1</span>,</span><br><span class="line">      name: <span class="string">"ls"</span>,</span><br><span class="line">      age: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需求：给 userList 的第最后一个用户年龄加一岁</p><p>不使用 immer 实现:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">  userList</span><br><span class="line">&#125; = <span class="keyword">this</span>.state</span><br><span class="line"><span class="keyword">let</span> users = userList.slice(),</span><br><span class="line">  lastIndex = users.length - <span class="number">1</span></span><br><span class="line">users[lastIndex].age++</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  userList: users</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用 immer 之后:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(produce(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> lastIndex = state.userList.length - <span class="number">1</span></span><br><span class="line">  state.userList[lastIndex].age++</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>是不是感觉代码量瞬间少了很多，阅读起来舒服了很多，而且更易于阅读了。</p><p><strong>React Hooks 中使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [data, setData] = useState(&#123;</span><br><span class="line">  a: <span class="string">'a'</span>,</span><br><span class="line">  b: <span class="string">'b'</span>,</span><br><span class="line">  c: &#123;</span><br><span class="line">    d: <span class="string">'d'</span>,</span><br><span class="line">    f: <span class="string">'f'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>需求: 把对象 c 里的 d 的值改为 10</p><p>不使用 immer 实现:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">setData(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...state,</span><br><span class="line">    c: &#123;</span><br><span class="line">      ...state.c,</span><br><span class="line">      d: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用 immer 之后:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setData(</span><br><span class="line">  produce(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">    state.c.d = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>immer + React Hooks 使用起来真的很顺手，而且更易于阅读，目前我就一直在用。</p><p><strong>React reducer 中使用</strong></p><p>不使用 immer:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'ADD'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        count:</span><br><span class="line">          state.count++</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'SUB'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        count:</span><br><span class="line">          state.count--</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 immer 之后:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reducer = produce(<span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'ADD'</span>:</span><br><span class="line">      state.count++</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'SUB'</span>:</span><br><span class="line">      state.count--</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>immer 原理解析</strong></p><p>immer 源码中，使用了一个 ES6 的新特性 Proxy 对象。Proxy 对象拦截某些操作并实现自定义行为。</p><p><strong>immer 中的proxy</strong></p><p>immer 的做法就是在内部维护一份 state，劫持所有操作，内部来判断是否有变化从而最终决定如何返回。下面这个例子就是一个构造函数，如果将它的实例传入 Proxy 对象作为第一个参数，就能够后面的处理对象中使用其中的方法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(state) &#123;</span><br><span class="line">    <span class="keyword">this</span>.modified = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.source = state</span><br><span class="line">    <span class="keyword">this</span>.copy = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span>(key) &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="keyword">this</span>.modified ?</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.source[key]: <span class="keyword">this</span>.copy[key]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span>(key, value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.modified) &#123;</span><br><span class="line">      <span class="keyword">this</span>.modifing()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.copy[key] = value</span><br><span class="line">  &#125;</span><br><span class="line">  modifing() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.modified) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">this</span>.modified = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 使用解构实现一层 immutable</span></span><br><span class="line">    <span class="keyword">this</span>.copy = <span class="built_in">Array</span>.isArray(<span class="keyword">this</span>.source) ? [...this.source] : &#123;</span><br><span class="line">      ...this.source</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个 Store 构造函数相比源代码省略了很多判断的部分。实例上面有 modified，source，copy 三个属性，有 get，set，modifing 三个方法。modified 作为内置的 flag，判断如何进行设置和返回。</p><p>里面最关键的就应该是 modifing 这个函数，如果触发了 setter 并且之前没有改动过的话，就会手动将 modified 这个 flag 设置为 true，并且使用解构实现一层 immutable。</p><p>对于 Proxy 的第二个参数，在简版的实现中，我们只是简单做一层转发，任何对元素的读取和写入都转发到 store 实例内部方法去处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PROXY_FLAG = <span class="string">'SYMBOL_PROXY_FLAG'</span></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="keyword">get</span>(target, key) &#123;</span><br><span class="line">    <span class="comment">// 如果遇到了这个 flag 我们直接返回我们操作的 target</span></span><br><span class="line">    <span class="keyword">return</span> key === PROXY_FLAG ? target : target.get(key)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span>(target, key, value) &#123;</span><br><span class="line">    <span class="keyword">return</span> target.set(key, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里在 getter 里面加一个 flag 的目的就在于将来从 proxy 对象中获取 store 实例更加方便。</p><p>最终我们能够完成这个 produce 函数，创建 store 实例后创建 proxy 实例。然后将创建的 proxy 实例传入第二个函数中去。这样无论在内部做怎样有副作用的事情，最终都会在 store 实例内部将它解决。最终得到了修改之后的 proxy 对象，而 proxy 对象内部已经维护了两份 state ，通过判断 modified 的值来确定究竟返回哪一份。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">produce</span>(<span class="params">state, producer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> store = <span class="keyword">new</span> Store(state)</span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(store, handler)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 执行我们传入的 producer 函数，我们实际操作的都是 proxy 实例，所有有副作用的操作都会在 proxy 内部进行判断，是否最终要对 store 进行改动。</span></span><br><span class="line">  producer(proxy)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理完成之后，通过 flag 拿到 store 实例</span></span><br><span class="line">  <span class="keyword">const</span> newState = proxy[PROXY_FLAG]</span><br><span class="line">  <span class="keyword">return</span> newState.modified ? newState.copy : newState.source</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，一个分割成 Store 构造函数，handler 处理对象和 produce 处理 state 这三个模块的最简版就完成了，将它们组合起来就是一个最最最 tiny 版的 immer ，里面去除了很多不必要的校验和冗余的变量。但真正的 immer 内部也有其他的功能，例如上面提到的深层嵌套对象的结构化共享等等。</p><p>当然，Proxy 作为一个新的 API，并不是所有环境都支持，Proxy 也无法 polyfill，所以 immer 在不支持 Proxy 的环境中，使用 Object.defineProperty 来进行一个兼容。</p><p>参考资料: </p><ul><li><a href="https://juejin.im/post/5e83e532f265da47e02a6d5a" target="_blank" rel="noopener">immer.js: 也许更适合你的immutable js库</a></li><li><a href="https://github.com/immerjs/immer/tree/master/docs" target="_blank" rel="noopener">官方文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS 里面的变量类型可以分为 &lt;code&gt;基本类型&lt;/code&gt; 和 &lt;code&gt;引用类型&lt;/code&gt; ，在 JS 中使用引用类型数据时需要格外的注意引用问题，不然，一不小心就踩坑了！！！&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b = a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a === b) &lt;span class=&quot;comment&quot;&gt;// ?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的 &lt;code&gt;**a**&lt;/code&gt; 跟 &lt;code&gt;**b**&lt;/code&gt; 会相对吗，因为是基本型数据，所以肯定是 &lt;strong&gt;false&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那我们改成引用类型呢？&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; obj1 = obj&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj1.a = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj.a) &lt;span class=&quot;comment&quot;&gt;// ?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时应该打印多少？10 还是 5，答案是 5，why？我刚刚明明修改的是 obj1，为什么会影响到 obj 呢，因为对象赋值本质上是把地址赋值给 obj1，并不是把 obj 中的内容赋值给 obj1，这样做是为了节约内存，但是在实际的生产过程当中这样的设计会引发无穷无尽的问题，所以我们要解决这种相互引用的问题。&lt;/p&gt;
&lt;p&gt;为了解决互相引用的问题ES6提供了 Object.assign，展开运算符 &lt;code&gt;...&lt;/code&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="+ immer" scheme="//sysy.site/tags/immer/"/>
    
  </entry>
  
  <entry>
    <title>Markdown图片插入</title>
    <link href="//sysy.site/2020/03/29/tuchuang/"/>
    <id>//sysy.site/2020/03/29/tuchuang/</id>
    <published>2020-03-29T11:30:00.000Z</published>
    <updated>2020-05-17T07:50:22.961Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 markdown 写文章时，会遇到要插入图片，markdown 本身是不支持图片直接插入，只能通过 <code>![]()</code> 的方式插入。</p><p>插入的图片路径有两种方式，一种是相对路径(相对于文档所在位置)，一种是绝对路径，如果使用相对路径，有一天不小心改动了图片的在本地的位置，这个图就会挂掉，为了解决这个问题一般使用绝对路径，先把图片上传到图床，然后会生成一个 url，在 markdown 中插入生成的 url，就可以显示图片了。</p><p>这里我选用七牛云的图床</p><p>第一步: 先去官网注册认证</p><p>官网地址: <a href="https://www.qiniu.com" target="_blank" rel="noopener">https://www.qiniu.com</a></p><blockquote><p>注册认证后有10G永久免费空间，每月10G国内和10G国外流量。</p></blockquote><a id="more"></a><p>第二步: 下载图床神器</p><ul><li>Windows 系统使用 MPic <a href="http://file.lzhaofu.cn/MPic%202.2.1.3.rar" target="_blank" rel="noopener">点击此处下载</a></li><li>Mac 系统使用 PicU <a href="https://github.com/chenxtdo/UPImageMacApp/releases/download/1.54/PicU-1.54.dmg" target="_blank" rel="noopener">点击此处下载</a></li></ul><blockquote><p>都支持拖拽、复制、截图上传，超级好用！！！</p></blockquote><p>由于笔者着的是 Windows 系统，所以介绍 Windows 的 MPic 用法<br>  1.登录七牛云，创建一个存储空间 (获取空间名)<br>  <img src="/assets/blogImg/mpic-1.png" alt="mpic-1"><br>  2.进入个人中心，获取 Access Key 与 Secret Key<br>  <img src="/assets/blogImg/mpic-2.png" alt="mpic-2"><br>  3.先点击设置账号，配置账号信息<br>  <img src="/assets/blogImg/mpic-3.png" alt="mpic-3"></p><p>  然后就可以愉快的使用图片上传神器了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用 markdown 写文章时，会遇到要插入图片，markdown 本身是不支持图片直接插入，只能通过 &lt;code&gt;![]()&lt;/code&gt; 的方式插入。&lt;/p&gt;
&lt;p&gt;插入的图片路径有两种方式，一种是相对路径(相对于文档所在位置)，一种是绝对路径，如果使用相对路径，有一天不小心改动了图片的在本地的位置，这个图就会挂掉，为了解决这个问题一般使用绝对路径，先把图片上传到图床，然后会生成一个 url，在 markdown 中插入生成的 url，就可以显示图片了。&lt;/p&gt;
&lt;p&gt;这里我选用七牛云的图床&lt;/p&gt;
&lt;p&gt;第一步: 先去官网注册认证&lt;/p&gt;
&lt;p&gt;官网地址: &lt;a href=&quot;https://www.qiniu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.qiniu.com&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注册认证后有10G永久免费空间，每月10G国内和10G国外流量。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="//sysy.site/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>快速入门 Markdown 语法</title>
    <link href="//sysy.site/2020/03/29/markdown-yufa/"/>
    <id>//sysy.site/2020/03/29/markdown-yufa/</id>
    <published>2020-03-29T06:24:00.000Z</published>
    <updated>2020-05-17T07:50:22.959Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>Markdown 是一种轻量级标记语言，它使人们使用纯文本格式编写文档，不需要跟 HTML 一样关注标签使用，只需要专注写文档即可，本文就带大家快速入门 Markdown。</p></blockquote><p>在开始之间，首先推荐几个编写 markdown 语法的工具，毕竟古人说的好，预先善其事，必先利其器。有一款出色的编辑器还是能让人事半功倍。</p><p><strong>1、Typora</strong><br>  下载地址: <a href="https://www.typora.io" target="_blank" rel="noopener">https://www.typora.io</a></p><blockquote><p>Mac，Windows，Linux 都支持下载，笔者也在用这款编辑器，超好用！！！</p></blockquote><a id="more"></a><p><strong>2、Markdown Preview Enhanced</strong><br>  下载地址: <a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced</a></p><blockquote><p>这个只是一个 Vs Code 的插件，可以让你在 Vs Code 编辑器中实时编辑预览，而不用再打开其他的应用来预览</p></blockquote><h3 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h3><p>  在 markdown 中总共有六种标题格式，如果要实现标题效果，你只需要在文本前加上 <code>#</code> 即可， <code>#</code> 号越多，标题级数越低，相应的，字体也越小。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p><strong>显示效果如下:</strong><br>  <img src="/assets/blogImg/md-title.png" alt="md-title"></p><p><strong>注意</strong>: <code>#</code> 与文本之间要有一个空格。</p><h3 id="二、分隔线"><a href="#二、分隔线" class="headerlink" title="二、分隔线"></a>二、分隔线</h3><p>  使用 <code>-</code> 或 <code>*</code> 实现分隔线效果 ，最少写三个</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### title</span><br><span class="line">  ---</span><br></pre></td></tr></table></figure><p><strong>显示效果如下:</strong><br>  <img src="/assets/blogImg/md-dividing-line.png" alt="md-dividing-line"></p><h3 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h3><ul><li><p><strong>有序列表</strong><br>在文字前加上数字，比如 <code>1.</code>  <code>2.</code> </p></li><li><p><strong>无序列表</strong><br>在文字前加上 <code>-</code> 或 <code>+</code> 即可</p></li><li><p><strong>任务列表</strong><br>在文字前加上 <code>[ ]</code> (不勾选) 或 <code>[x]</code> 勾选</p></li></ul><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 有序列表 --&gt;</span><br><span class="line"></span><br><span class="line">  1. <span class="string">list1</span></span><br><span class="line"><span class="string"> </span> 2. <span class="string">list2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;</span>!-- 无序列表 --&gt;</span><br><span class="line"></span><br><span class="line">  + <span class="built_in">list-1</span></span><br><span class="line"><span class="built_in"></span>    - <span class="built_in">list-1-1</span></span><br><span class="line"><span class="built_in"></span>    - <span class="built_in">list-1-2</span></span><br><span class="line"><span class="built_in"></span>  + <span class="built_in">list-2</span></span><br><span class="line"><span class="built_in"></span>    - <span class="built_in">list-2-1</span></span><br><span class="line"><span class="built_in"></span>    - <span class="built_in">list-2-2</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">&lt;!--</span> 任务列表 --&gt;</span><br><span class="line"></span><br><span class="line">  - [x] 选项一</span><br><span class="line">  - [ ] 选项二  </span><br><span class="line">  - [ ] 选项三</span><br></pre></td></tr></table></figure><p><strong>显示效果如下:</strong><br>有序列表:</p><ol><li>list1</li><li>list2</li></ol><p>无序列表:</p><ul><li>list-2<ul><li>list-2-1</li><li>list-2-2</li></ul></li></ul><p>任务列表:</p><ul><li>[x] 选项一</li><li>[x] 选项二  </li><li>[x] 选项三</li></ul><p><strong>注意</strong>: <code>-</code> 、 <code>+</code> 、 <code>1.</code> 、 <code>2.</code>、 <code>[ ]</code> 与文本之间要保留一个空格。</p><h3 id="四、字体样式"><a href="#四、字体样式" class="headerlink" title="四、字体样式"></a>四、字体样式</h3><ul><li><strong>加粗</strong><br>要加粗的文字左右分别用两个 <code>*</code> 号包起来</li><li><strong>斜体</strong><br>要倾斜的文字左右分别用一个 <code>*</code> 号包起来</li><li><strong>加粗斜体</strong><br>要倾斜和加粗的文字左右分别用三个 <code>*</code> 号包起来</li><li><strong>删除</strong><br>要删除的文字左右分别用两个 <code>~</code> 号包起来</li><li><strong>标记</strong><br>要标记的文字左右分别用一个 <strong>`</strong> 号包起来</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**加粗**</span></span><br><span class="line"><span class="emphasis">*斜体*</span></span><br><span class="line"><span class="strong">***加粗斜体**</span>*</span><br><span class="line">~~删除~~</span><br><span class="line"><span class="code">`标记`</span></span><br></pre></td></tr></table></figure><p><strong>显示效果如下:</strong><br>  <strong>加粗</strong><br>  <em>斜体</em><br>  <strong><em>加粗斜体</em></strong><br>  <del>删除</del><br>  <code>标记</code></p><h3 id="五、引用"><a href="#五、引用" class="headerlink" title="五、引用"></a>五、引用</h3><p>  在我们写作的时候有些时候需要引用他人的文字，这个时候引用这个格式就很有必要了，在引用的文字前加 <code>&gt;</code> 即可。引用也可以嵌套，比如加两个 <code>&gt;&gt;</code>或者 n 个。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 从今天起做一个简单的人，不沉迷于幻想、不庸人自扰、不浪费时间、不沉迷过去、不恐惧未来！生活如果不宠你，更要善待自己，这一生风雨兼程，就是为了遇见更好的自己。</span><br><span class="line"><span class="meta">&gt;&gt;</span> ---陌生人</span><br></pre></td></tr></table></figure><p><strong>显示效果如下:</strong></p><blockquote><p>从今天起做一个简单的人，不沉迷于幻想、不庸人自扰、不浪费时间、不沉迷过去、不恐惧未来！生活如果不宠你，更要善待自己，这一生风雨兼程，就是为了遇见更好的自己。</p><blockquote><p>—陌生人</p></blockquote></blockquote><h3 id="六、代码块"><a href="#六、代码块" class="headerlink" title="六、代码块"></a>六、代码块</h3><ul><li><strong>普通代码块</strong><br>将代码左右两边，使用 *<figure class="highlight plain"><figcaption><span>号包括起来</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ **语法代码块**</span><br><span class="line">  将代码左右两边，使用 *```* 号包括起来，并在左边的符号加上不同的语言</span><br></pre></td></tr></table></figure></li></ul><p>普通代码块<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```javascript</span><br><span class="line"><span class="comment">// 语法代码块</span></span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">str</span> = <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure></p><p><strong>显示效果如下:</strong></p><p><img src="/assets/blogImg/md-daimakuai.png" alt="md-daimakuai"></p><h3 id="七、插入链接"><a href="#七、插入链接" class="headerlink" title="七、插入链接"></a>七、插入链接</h3><p>  <code>[]</code> 中放要显示的文字，<code>()</code> 中放链接<br>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">百度一下</span>](<span class="link">http://www.baidu.com</span>)</span><br></pre></td></tr></table></figure></p><p><strong>显示效果如下:</strong><br>  <a href="http://www.baidu.com" target="_blank" rel="noopener">百度一下</a></p><h3 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h3><p>  在文字左右插入 <code>|</code> 符号，<code>:</code> 代表对齐方式。<br>  <strong>:—-:</strong> (居中对齐)<br>  <strong>:—-</strong> (左对齐)<br>  <strong>—-:</strong> (右对齐)<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string"> name </span>|<span class="string"> age </span>|<span class="string"> gender </span>|</span><br><span class="line">|<span class="string"> :--: </span>|<span class="string"> :-: </span>|<span class="string"> :----: </span>|</span><br><span class="line">|<span class="string"> 张三 </span>|<span class="string"> 30 </span>|<span class="string"> mail </span>|</span><br><span class="line">|<span class="string"> 李四 </span>|<span class="string"> 19 </span>|<span class="string"> mail </span>|</span><br></pre></td></tr></table></figure></p><p><strong>显示效果如下:</strong></p><table><thead><tr><th style="text-align:center">name</th><th style="text-align:center">age</th><th style="text-align:center">gender</th></tr></thead><tbody><tr><td style="text-align:center">张三</td><td style="text-align:center">30</td><td style="text-align:center">mail</td></tr><tr><td style="text-align:center">李四</td><td style="text-align:center">19</td><td style="text-align:center">mail</td></tr></tbody></table><h3 id="九、流程图"><a href="#九、流程图" class="headerlink" title="九、流程图"></a>九、流程图</h3><p>  使用 mermaid 格式的流程图</p><p>  <img src="/assets/blogImg/md-liuchengtu.png" alt="md-liuchengtu"></p><h3 id="十、图片"><a href="#十、图片" class="headerlink" title="十、图片"></a>十、图片</h3><p>  <code>[]</code> 中放当图片由于某些原因无法显示时，显示的文字，<code>()</code> 中放链接地址，可以相对路径，也可以是绝对路径。<br>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 普通图片 --&gt;</span></span></span><br><span class="line">![<span class="string">百度logo</span>](<span class="link">https://www.baidu.com/img/bd_logo1.png?qua=high</span>)</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 图片链接 --&gt;</span></span></span><br><span class="line">[<span class="string">![百度logo</span>](<span class="link">https://www.baidu.com/img/bd_logo1.png?qua=high</span>)](<span class="link">http://www.baidu.com</span>)</span><br></pre></td></tr></table></figure></p><p><strong>显示效果如下:</strong><br>  普通图片<br>  <img src="https://www.baidu.com/img/bd_logo1.png?qua=high" alt="百度logo"><br>  图片链接<br>  <a href="http://www.baidu.com" target="_blank" rel="noopener"><img src="https://www.baidu.com/img/bd_logo1.png?qua=high" alt="百度logo"></a></p><p><strong>建议:</strong> 如果你的文章不发往掘金、思否、CSDN等平台的话，建议使用相对路径，如果你的文章要发往各个平台，因为每个平台的图片处理方式不同，所以建议使用绝对路径（使用图床或自己买服务器上传图片）。</p><h3 id="十一、支持内嵌HTML-amp-CSS"><a href="#十一、支持内嵌HTML-amp-CSS" class="headerlink" title="十一、支持内嵌HTML&amp;CSS"></a>十一、支持内嵌HTML&amp;CSS</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: #abcdef; font-size: 26px;"</span>&gt;</span>内嵌HTML、CSS<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>显示效果如下:</strong></p><p style="color: #abcdef; font-size: 26px;">内嵌HTML、CSS</p><h3 id="十二、锚点"><a href="#十二、锚点" class="headerlink" title="十二、锚点"></a>十二、锚点</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### [需要跳转的目录](#<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>显示效果如下:</strong></p><h4 id="需要跳转的目录"><a href="#需要跳转的目录" class="headerlink" title="需要跳转的目录"></a><a href="#1">需要跳转的目录</a></h4><p>注意: 只有标题支持锚点</p><h3 id="十三、解释型定义"><a href="#十三、解释型定义" class="headerlink" title="十三、解释型定义"></a>十三、解释型定义</h3><p>  开头一个<code>:</code> + <code>Tab</code> 组成<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Markdown </span><br><span class="line">: 轻量级文本标记语言，可以转换成html，pdf等格式</span><br></pre></td></tr></table></figure></p><p><strong>显示效果如下:</strong></p><p>Markdown<br>: 轻量级文本标记语言，可以转换成html，pdf等格式</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Markdown 是一种轻量级标记语言，它使人们使用纯文本格式编写文档，不需要跟 HTML 一样关注标签使用，只需要专注写文档即可，本文就带大家快速入门 Markdown。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在开始之间，首先推荐几个编写 markdown 语法的工具，毕竟古人说的好，预先善其事，必先利其器。有一款出色的编辑器还是能让人事半功倍。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、Typora&lt;/strong&gt;&lt;br&gt;  下载地址: &lt;a href=&quot;https://www.typora.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.typora.io&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mac，Windows，Linux 都支持下载，笔者也在用这款编辑器，超好用！！！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="+ Markdown" scheme="//sysy.site/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>前端组件库及工具集合</title>
    <link href="//sysy.site/2020/03/28/web-ui-utils/"/>
    <id>//sysy.site/2020/03/28/web-ui-utils/</id>
    <published>2020-03-28T05:29:00.000Z</published>
    <updated>2020-05-17T07:50:22.963Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、PC-端-UI-框架"><a href="#一、PC-端-UI-框架" class="headerlink" title="一、PC 端 UI 框架"></a>一、PC 端 UI 框架</h3><ul><li><h4 id="Ant-Design"><a href="#Ant-Design" class="headerlink" title="Ant Design"></a>Ant Design</h4><ul><li>官网地址: <a href="https://ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">https://ant.design/docs/react/introduce-cn</a></li><li>GitHub 地址: <a href="https://github.com/ant-design/ant-design" target="_blank" rel="noopener">https://github.com/ant-design/ant-design</a></li></ul><blockquote><p>阿里旗下蚂蚁金服基于 <em>React</em> 开源的 UI 组件库，企业级中后台直接用它就完事，组件齐全，例子较多，使用简单，估计已经是很多公司的标配了，我公司之前使用，后来转公司内部 UI 组件库了，转的时候还比较难，毕竟 Ant Design 已经发布这么久了，经过很多开发者的建议(最近又新发布了 4.0版本，增加了许多新特性)，功能齐全，而我司的还是个新新的 UI 框架，坑嘛，你懂的！</p></blockquote><p><img src="/assets/blogImg/ant-design-react.png" alt="ant-design-react"></p></li></ul><a id="more"></a><ul><li><h4 id="Vue-版的-Ant-Design"><a href="#Vue-版的-Ant-Design" class="headerlink" title="Vue 版的 Ant Design"></a>Vue 版的 Ant Design</h4><ul><li>官网地址: <a href="https://www.antdv.com/docs/vue/introduce-cn" target="_blank" rel="noopener">https://www.antdv.com/docs/vue/introduce-cn</a></li><li>GitHub 地址: <a href="https://github.com/vueComponent/ant-design-vue" target="_blank" rel="noopener">https://github.com/vueComponent/ant-design-vue</a></li></ul><blockquote><p>是 Ant Design 基于 Vue 实现</p></blockquote><p><img src="/assets/blogImg/ant-design-vue.png" alt="ant-design-vue"></p></li></ul><h3 id="二、中后台管理"><a href="#二、中后台管理" class="headerlink" title="二、中后台管理"></a>二、中后台管理</h3><ul><li><h4 id="Ant-Design-Pro"><a href="#Ant-Design-Pro" class="headerlink" title="Ant Design Pro"></a>Ant Design Pro</h4><ul><li>官网地址: <a href="https://pro.ant.design/index-cn" target="_blank" rel="noopener">https://pro.ant.design/index-cn</a></li><li>GitHub 地址: <a href="https://github.com/ant-design/ant-design-pro" target="_blank" rel="noopener">https://github.com/ant-design/ant-design-pro</a></li></ul><blockquote><p>基于 React 的可视化快速搭建中后台管理系统</p></blockquote><p><img src="/assets/blogImg/ant-design-react-pro.png" alt="ant-design-react-pro"></p></li><li><h4 id="Vue-版的-Ant-Design-Pro"><a href="#Vue-版的-Ant-Design-Pro" class="headerlink" title="Vue 版的 Ant Design Pro"></a>Vue 版的 Ant Design Pro</h4><ul><li>官网地址: <a href="https://pro.loacg.com" target="_blank" rel="noopener">https://pro.loacg.com</a></li><li>GitHub 地址: <a href="https://github.com/sendya/ant-design-pro-vue" target="_blank" rel="noopener">https://github.com/sendya/ant-design-pro-vue</a></li></ul><blockquote><p>基于 Vue 的可视化快速搭建中后台管理系统</p></blockquote><p><img src="/assets/blogImg/ant-design-vue-pro.png" alt="ant-design-vue-pro"></p></li></ul><h3 id="三、移动端-UI-框架"><a href="#三、移动端-UI-框架" class="headerlink" title="三、移动端 UI 框架"></a>三、移动端 UI 框架</h3><ul><li><h4 id="Mobile-版的-Ant-Design"><a href="#Mobile-版的-Ant-Design" class="headerlink" title="Mobile 版的 Ant Design"></a>Mobile 版的 Ant Design</h4><ul><li>官网地址: <a href="https://mobile.ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">https://mobile.ant.design/docs/react/introduce-cn</a></li><li>GitHub 地址: <a href="https://github.com/ant-design/ant-design-mobile" target="_blank" rel="noopener">https://github.com/ant-design/ant-design-mobile</a></li></ul><blockquote><p>是 Ant Design 基于移动端规范的 React 实现</p></blockquote><p><img src="/assets/blogImg/ant-design-react-mobile.png" alt="ant-design-react-mobile"></p></li><li><h4 id="React-Native-版的-Ant-Design"><a href="#React-Native-版的-Ant-Design" class="headerlink" title="React Native 版的 Ant Design"></a>React Native 版的 Ant Design</h4><ul><li>官网地址: <a href="https://rn.mobile.ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">https://rn.mobile.ant.design/docs/react/introduce-cn</a></li><li>GitHub 地址: <a href="https://github.com/ant-design/ant-design-mobile-rn" target="_blank" rel="noopener">https://github.com/ant-design/ant-design-mobile-rn</a></li></ul><blockquote><p>是 Ant Design 基于移动端规范的 React Native 实现, 满足写 RN 的同学</p></blockquote><p><img src="/assets/blogImg/ant-design-react-mobile-rn.png" alt="ant-design-react-mobile-rn"></p></li></ul><h3 id="四、跨端框架"><a href="#四、跨端框架" class="headerlink" title="四、跨端框架"></a>四、跨端框架</h3><ul><li><h4 id="Taro"><a href="#Taro" class="headerlink" title="Taro"></a>Taro</h4><ul><li>官网地址: <a href="https://taro-docs.jd.com/taro/docs/README.html" target="_blank" rel="noopener">https://taro-docs.jd.com/taro/docs/README.html</a></li><li>GitHub 地址: <a href="https://github.com/NervJS/taro" target="_blank" rel="noopener">https://github.com/NervJS/taro</a></li></ul><blockquote><p>Taro 是一套遵循 React 语法规范的多端开发解决方案，目前已支持 (微信、百度、支付宝、字节跳动、QQ、京东) 小程序、快应用、H5、React-Native 等平台</p></blockquote><p><img src="/assets/blogImg/taro.png" alt="taro"></p></li><li><h4 id="Taro-UI"><a href="#Taro-UI" class="headerlink" title="Taro UI"></a>Taro UI</h4><ul><li>官网地址: <a href="https://taro-ui.jd.com/#/docs/introduction" target="_blank" rel="noopener">https://taro-ui.jd.com/#/docs/introduction</a></li><li>GitHub 地址: <a href="https://github.com/NervJS/taro-ui" target="_blank" rel="noopener">https://github.com/NervJS/taro-ui</a></li></ul><blockquote><p>基于上面的 Taro 跨端框架开发的 UI 组件库</p></blockquote><p><img src="/assets/blogImg/taro-ui.png" alt="taro-ui"></p></li><li><h4 id="uni-app"><a href="#uni-app" class="headerlink" title="uni-app"></a>uni-app</h4><ul><li>官网地址: <a href="https://uniapp.dcloud.io" target="_blank" rel="noopener">https://uniapp.dcloud.io</a></li><li>GitHub 地址: <a href="https://github.com/dcloudio/uni-app" target="_blank" rel="noopener">https://github.com/dcloudio/uni-app</a></li></ul><blockquote><p>uni-app 是一个以 Vue 开发出来的跨端框架，目前已支持iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉) 等多个平台</p></blockquote><p><img src="/assets/blogImg/uni-app.png" alt="uni-app"></p></li></ul><h3 id="五、数据可视化"><a href="#五、数据可视化" class="headerlink" title="五、数据可视化"></a>五、数据可视化</h3><ul><li><h4 id="AntV"><a href="#AntV" class="headerlink" title="AntV"></a>AntV</h4><ul><li>官网地址: <a href="https://antv.gitee.io/zh#products" target="_blank" rel="noopener">https://antv.gitee.io/zh#products</a></li><li>GitHub 地址: <a href="https://github.com/antvis" target="_blank" rel="noopener">https://github.com/antvis</a></li></ul><blockquote><p>AntV 是由蚂蚁金服开发全新一代数据可视化解决方案</p></blockquote><p><img src="/assets/blogImg/antv.png" alt="ant-v"></p></li><li><h4 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h4><ul><li>官网地址: <a href="https://echarts.apache.org/zh" target="_blank" rel="noopener">https://echarts.apache.org/zh</a></li><li>GitHub 地址: <a href="https://github.com/apache/incubator-echarts" target="_blank" rel="noopener">https://github.com/apache/incubator-echarts</a></li></ul><blockquote><p>echarts 是由百度开发的一套数据可视化解决方案，对于数据可视化这块，个人比较倾向于 echarts，因为我司项目中只有 echarts，所以只能用它了，哈哈哈</p></blockquote><p><img src="/assets/blogImg/echarts.png" alt="echarts"></p></li><li><h4 id="D3"><a href="#D3" class="headerlink" title="D3"></a>D3</h4><ul><li>官网地址: <a href="https://d3js.org" target="_blank" rel="noopener">https://d3js.org</a></li><li>GitHub 地址: <a href="https://github.com/d3/d3" target="_blank" rel="noopener">https://github.com/d3/d3</a></li></ul><blockquote><p>基于 DOM 方式构建图表，链式操作 (有点像 jQuery 的风格)</p></blockquote><p><img src="/assets/blogImg/d3.png" alt="d3"></p></li></ul><h4 id="六、工具库"><a href="#六、工具库" class="headerlink" title="六、工具库"></a>六、工具库</h4><ul><li><h4 id="react-beautiful-dnd"><a href="#react-beautiful-dnd" class="headerlink" title="react-beautiful-dnd"></a>react-beautiful-dnd</h4><ul><li>官网地址: <a href="https://react-beautiful-dnd.netlify.com" target="_blank" rel="noopener">https://react-beautiful-dnd.netlify.com</a></li><li>GitHub 地址: <a href="https://github.com/atlassian/react-beautiful-dnd" target="_blank" rel="noopener">https://github.com/atlassian/react-beautiful-dnd</a></li></ul><blockquote><p>最近刚刚在公司项目中用到的一个基于 React 开发的拖拽组件库，功能齐全，支持多种交互方式（移动端，PC 端都支持）</p></blockquote><p><img src="/assets/blogImg/react-beautiful-dnd.gif" alt="react-beautiful-dnd"></p></li><li><h4 id="Animate"><a href="#Animate" class="headerlink" title="Animate"></a>Animate</h4><ul><li>官网地址: <a href="https://daneden.github.io/animate.css" target="_blank" rel="noopener">https://daneden.github.io/animate.css</a></li><li>GitHub 地址: <a href="https://github.com/daneden/animate.css" target="_blank" rel="noopener">https://github.com/daneden/animate.css</a></li></ul><blockquote><p>动画风格多样，全面，里面总有你想要的</p></blockquote><p><img src="/assets/blogImg/animate.png" alt="animate"></p></li><li><h4 id="lax"><a href="#lax" class="headerlink" title="lax"></a>lax</h4><ul><li>GitHub 地址: <a href="https://github.com/alexfoxy/laxxx" target="_blank" rel="noopener">https://github.com/alexfoxy/laxxx</a></li></ul><blockquote><p>视差滚动实现，搭配 Animate.css 当页面滚动时，可以呈现各种花里胡哨的效果</p></blockquote><p><img src="/assets/blogImg/lax.gif" alt="lax"></p></li><li><h4 id="Swiper"><a href="#Swiper" class="headerlink" title="Swiper"></a>Swiper</h4><ul><li>官网地址: <a href="https://www.swiper.com.cn" target="_blank" rel="noopener">https://www.swiper.com.cn</a></li><li>GitHub 地址: <a href="https://github.com/nolimits4web/swiper" target="_blank" rel="noopener">https://github.com/nolimits4web/swiper</a></li></ul><blockquote><p>一个轮播图组件库，里面有各种类型的轮播图，移动端，PC 端都支持哦 ~</p></blockquote><p><img src="/assets/blogImg/swiper.png" alt="swiper"></p></li><li><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><ul><li>官网地址: <a href="http://www.axios-js.com" target="_blank" rel="noopener">http://www.axios-js.com</a></li><li>GitHub 地址: <a href="https://github.com/axios/axios" target="_blank" rel="noopener">https://github.com/axios/axios</a></li></ul><blockquote><p>axios 封装了各种常见的请求方法，是目前使用人数最多的一款请求库</p></blockquote><p><img src="/assets/blogImg/axios.png" alt="axios"></p></li><li><h4 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h4><ul><li>官网地址: <a href="https://eslint.org" target="_blank" rel="noopener">https://eslint.org</a></li><li>GitHub 地址: <a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">https://github.com/eslint/eslint</a></li></ul><blockquote><p>ESLint 为了解决统一 JavaScript 代码风格而诞生的一款代码检查工具，刚开始使用时会有点奔溃，习惯就好</p></blockquote><p><img src="/assets/blogImg/eslint.png" alt="eslint"></p></li><li><h4 id="loadsh"><a href="#loadsh" class="headerlink" title="loadsh"></a>loadsh</h4><ul><li>官网地址: <a href="https://www.lodashjs.com" target="_blank" rel="noopener">https://www.lodashjs.com</a></li><li>GitHub 地址: <a href="https://github.com/LBNL-ETA/loadshape" target="_blank" rel="noopener">https://github.com/LBNL-ETA/loadshape</a></li></ul><blockquote><p>loadsh 是一个模块化、高性能的 JavaScript 实用工具库，里面有很多实用的方法，我用的比较多的是里面的 isEmpty 方法，该方法判断一个变量是否为空</p></blockquote><p><img src="/assets/blogImg/loadsh.png" alt="loadsh"></p></li><li><h4 id="Moment"><a href="#Moment" class="headerlink" title="Moment"></a>Moment</h4><ul><li>官网地址: <a href="https://momentjs.com" target="_blank" rel="noopener">https://momentjs.com</a></li><li>GitHub 地址: <a href="https://github.com/moment/moment" target="_blank" rel="noopener">https://github.com/moment/moment</a></li></ul><blockquote><p>用于解析，操作和格式化日期和时间，Node 和 浏览器中都可以使用</p></blockquote><p><img src="/assets/blogImg/moment.png" alt="moment"></p></li><li><h4 id="Can-I-use"><a href="#Can-I-use" class="headerlink" title="Can I use"></a>Can I use</h4><ul><li>官网地址: <a href="https://www.caniuse.com" target="_blank" rel="noopener">https://www.caniuse.com</a></li></ul><blockquote><p>开发必备，用于查看新特性的支持情况</p></blockquote><p><img src="/assets/blogImg/can-i-use.png" alt="can-i-use"></p></li><li><h4 id="Mock"><a href="#Mock" class="headerlink" title="Mock"></a>Mock</h4><ul><li>官网地址: <a href="http://mockjs.com" target="_blank" rel="noopener">http://mockjs.com</a></li><li>GitHub 地址: <a href="https://github.com/nuysoft/Mock" target="_blank" rel="noopener">https://github.com/nuysoft/Mock</a></li></ul><blockquote><p>模拟后端数据，做前后端分离，让前端独立于后端进行开发，不需要修改既有代码，就可以拦截 Ajax 请求，返回模拟的响应数据。而且数据类型丰富，使用也简单。</p></blockquote><p><img src="/assets/blogImg/mock.png" alt="mock"></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、PC-端-UI-框架&quot;&gt;&lt;a href=&quot;#一、PC-端-UI-框架&quot; class=&quot;headerlink&quot; title=&quot;一、PC 端 UI 框架&quot;&gt;&lt;/a&gt;一、PC 端 UI 框架&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;Ant-Design&quot;&gt;&lt;a href=&quot;#Ant-Design&quot; class=&quot;headerlink&quot; title=&quot;Ant Design&quot;&gt;&lt;/a&gt;Ant Design&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;官网地址: &lt;a href=&quot;https://ant.design/docs/react/introduce-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ant.design/docs/react/introduce-cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub 地址: &lt;a href=&quot;https://github.com/ant-design/ant-design&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/ant-design/ant-design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;阿里旗下蚂蚁金服基于 &lt;em&gt;React&lt;/em&gt; 开源的 UI 组件库，企业级中后台直接用它就完事，组件齐全，例子较多，使用简单，估计已经是很多公司的标配了，我公司之前使用，后来转公司内部 UI 组件库了，转的时候还比较难，毕竟 Ant Design 已经发布这么久了，经过很多开发者的建议(最近又新发布了 4.0版本，增加了许多新特性)，功能齐全，而我司的还是个新新的 UI 框架，坑嘛，你懂的！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blogImg/ant-design-react.png&quot; alt=&quot;ant-design-react&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="工具" scheme="//sysy.site/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>JS 数组扁平化 (flatten)</title>
    <link href="//sysy.site/2020/03/21/js-arrayflatten/"/>
    <id>//sysy.site/2020/03/21/js-arrayflatten/</id>
    <published>2020-03-21T10:15:00.000Z</published>
    <updated>2020-03-22T04:46:50.502Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​    数组是 JS 中使用评率仅次于对象的数据结构，官方提供了诸多 API (比如：push，pop，shift，unshift ….)，今天我们来谈谈如何扁平化数组。</p><blockquote><p>顾名思义，扁平化数组就是将一些嵌套的多维数组转成一维数组。</p></blockquote><p>我们以一个例子贯穿全文:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>]], <span class="number">10</span>]</span><br></pre></td></tr></table></figure><h4 id="一、ES10-中提供的数组扁平化方法-—-flat"><a href="#一、ES10-中提供的数组扁平化方法-—-flat" class="headerlink" title="一、ES10 中提供的数组扁平化方法 — flat"></a>一、ES10 中提供的数组扁平化方法 — flat</h4><blockquote><p><strong>flat</strong> 方法会按照一个可指定的深度进行递归遍历数组，并将所有遍历到的元素合并为一个新的数组返回。</p></blockquote><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newArray = arr.flat([depth])</span><br></pre></td></tr></table></figure><p>注意：dpeth 参数是可选的, 指定要提取嵌套数组的结构深度，默认值为 1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = array.flat(<span class="literal">Infinity</span>) <span class="comment">// 当参数为 Infinity 时代表，递归任意深度的嵌套数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="二、for…of-实现"><a href="#二、for…of-实现" class="headerlink" title="二、for…of 实现"></a>二、for…of 实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flatten = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">            <span class="built_in">Array</span>.isArray(item) ? flatten(item) : result.push(item)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;())</span><br><span class="line"><span class="built_in">console</span>.log(flatten(array)) <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><h4 id="三、生成器-Generator-实现"><a href="#三、生成器-Generator-实现" class="headerlink" title="三、生成器(Generator)实现"></a>三、生成器(Generator)实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">flatten</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        <span class="built_in">Array</span>.isArray(item) ? <span class="keyword">yield</span> *flatten(item) : <span class="keyword">yield</span> item</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log([...flatten(array)]) <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><h4 id="四、reduce-实现"><a href="#四、reduce-实现" class="headerlink" title="四、reduce 实现"></a>四、reduce 实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">result, item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> result.concat(<span class="built_in">Array</span>.isArray(item) ? flatten(item) : item)</span><br><span class="line">    &#125;, [])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(flatten(array)) <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><h4 id="五、利用-JSON-对象上的方法实现"><a href="#五、利用-JSON-对象上的方法实现" class="headerlink" title="五、利用 JSON 对象上的方法实现"></a>五、利用 JSON 对象上的方法实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flatten = <span class="function"><span class="params">arr</span> =&gt;</span> <span class="built_in">JSON</span>.parse(<span class="string">`[<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(arr).replace(<span class="regexp">/\[|\]/g</span>, <span class="string">''</span>)&#125;</span>]`</span>)</span><br><span class="line"><span class="built_in">console</span>.log(flatten(array)) <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><p><strong>缺点:</strong> 由于是使用 JSON.stringify 方法，它会隐式的把非 <strong>Boolean, Number, String, Object, Array, null</strong> 类型的值转化成 null</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;​    数组是 JS 中使用评率仅次于对象的数据结构，官方提供了诸多 API (比如：push，pop，shift，unshift ….)，今天我们来谈谈如何扁平化数组。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;顾名思义，扁平化数组就是将一些嵌套的多维数组转成一维数组。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们以一个例子贯穿全文:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; array = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]], &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;一、ES10-中提供的数组扁平化方法-—-flat&quot;&gt;&lt;a href=&quot;#一、ES10-中提供的数组扁平化方法-—-flat&quot; class=&quot;headerlink&quot; title=&quot;一、ES10 中提供的数组扁平化方法 — flat&quot;&gt;&lt;/a&gt;一、ES10 中提供的数组扁平化方法 — flat&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;flat&lt;/strong&gt; 方法会按照一个可指定的深度进行递归遍历数组，并将所有遍历到的元素合并为一个新的数组返回。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h5&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; newArray = arr.flat([depth])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：dpeth 参数是可选的, 指定要提取嵌套数组的结构深度，默认值为 1&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; result = array.flat(&lt;span class=&quot;literal&quot;&gt;Infinity&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 当参数为 Infinity 时代表，递归任意深度的嵌套数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result) &lt;span class=&quot;comment&quot;&gt;// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="//sysy.site/tags/javascript/"/>
    
      <category term="js-array" scheme="//sysy.site/tags/js-array/"/>
    
  </entry>
  
  <entry>
    <title>CSS 变量(variable) -- 实战篇</title>
    <link href="//sysy.site/2020/03/20/css-variable-2/"/>
    <id>//sysy.site/2020/03/20/css-variable-2/</id>
    <published>2020-03-20T13:31:00.000Z</published>
    <updated>2020-05-17T07:50:22.955Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、-网站换肤"><a href="#一、-网站换肤" class="headerlink" title="一、 网站换肤"></a>一、 网站换肤</h4><p>1、实现网站换肤功能，一般最先想到的是用全局 class 控制样式切换<br>缺点：全局控制 CSS，在项目不大，换肤样式不多的情况下，还能勉强够用。但是换肤样式很多的话，代码会非常臃肿，不利于维护。<br>2、通过 js 来切换引入 CSS 样式的 href 属性值，来达到样式切换的目的。<br>缺点：使用 js 改变 href 属性会带来加载延迟(样式文件越大，加载越久)。<br>3、使用 js 修改 css 变量值来达到换肤效果。</p><p>今天我们要说的就是第三种, 使用 js 修改 css 变量值来达到换肤效果</p><a id="more"></a><p><img src="/assets/blogImg/wood.jpg" alt="配图"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">        color: var(--color);</span><br><span class="line">        background-color: var(--bg-color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">        color: var(--active-color);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>风格一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>风格二<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先在根元素上定义背景颜色、字体颜色、active 颜色等变量</span></span><br><span class="line"><span class="keyword">const</span> style1 = &#123;</span><br><span class="line">    <span class="string">"--bg-color"</span>: <span class="string">"#f5f5f5"</span>,</span><br><span class="line">    <span class="string">"--color"</span>: <span class="string">"#222"</span>,</span><br><span class="line">    <span class="string">"--active-color"</span>: <span class="string">"#c90000"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> style2 = &#123;</span><br><span class="line">    <span class="string">"--bg-color"</span>: <span class="string">"#fff"</span>,</span><br><span class="line">    <span class="string">"--color"</span>: <span class="string">"#333"</span>,</span><br><span class="line">    <span class="string">"--active-color"</span>: <span class="string">"#ff6700"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> root = <span class="built_in">document</span>.documentElement,</span><br><span class="line">    btn1 = <span class="built_in">document</span>.getElementById(<span class="string">"btn1"</span>),</span><br><span class="line">    btn2 = <span class="built_in">document</span>.getElementById(<span class="string">"btn2"</span>);</span><br><span class="line">btn1.addEventListener(<span class="string">"click"</span>, () =&gt; styleHandle(root, style1));</span><br><span class="line">btn2.addEventListener(<span class="string">"click"</span>, () =&gt; styleHandle(root, style2));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">styleHandle</span>(<span class="params">elem, style</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> style) &#123;</span><br><span class="line">        <span class="keyword">if</span> (style.hasOwnProperty(prop)) &#123;</span><br><span class="line">            elem.style.setProperty(prop, style[prop]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、-条形加载-Loading"><a href="#二、-条形加载-Loading" class="headerlink" title="二、 条形加载 Loading"></a>二、 条形加载 Loading</h4><p><img src="/assets/blogImg/loading-bar.gif" alt="loading bar"></p><p>一个条形加载 Loading 通常由几条线组成，并且每条线存在不同的时延，通过时间差运行相同的动画，从而产生 loading 效果，估计大部分的同学可能会把 css 写成一下这样。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#loading</span> &#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">        height: 100vh;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#loading</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">        margin: 0 10px;</span><br><span class="line">        height: 30px;</span><br><span class="line">        width: 20px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">        border-radius: 5px;</span><br><span class="line">        animation-iteration-count: infinite;</span><br><span class="line">        animation-timing-function: linear;</span><br><span class="line">        animation-duration: 1s;</span><br><span class="line">        animation-name: loading;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#loading</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span></span><br><span class="line">        animation-delay: 100ms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#loading</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span></span><br><span class="line">        animation-delay: 200ms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#loading</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(4)</span> &#123;</span></span><br><span class="line">        animation-delay: 300ms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#loading</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(5)</span> &#123;</span></span><br><span class="line">        animation-delay: 400ms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="keyword">@keyframes</span> loading &#123;</span></span><br><span class="line">        0% &#123;</span><br><span class="line">            height: 30px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        50% &#123;</span><br><span class="line">            height: 120px;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"loading"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> loading = <span class="built_in">document</span>.getElementById(<span class="string">"loading"</span>),</span></span><br><span class="line"><span class="javascript">        fragment = <span class="built_in">document</span>.createDocumentFragment();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="javascript">        div.className = <span class="string">`item`</span> ;</span></span><br><span class="line">        fragment.appendChild(div);</span><br><span class="line">    &#125;</span><br><span class="line">    loading.appendChild(fragment);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分析代码发现，每个 item 只是存在 animation-delay 不同，而其余代码则完全相同，如果有 100 个 item，那岂不是要写 100 个 :nth-child。<br>显然这种方式不灵活，我们可以使用 css 变量来代替。</p><p>对于 HTML 部分的修改，让每个 item 添加一个 css 变量，对于 css 部分的修改，对规律变化的部分使用 css 变量来代替即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#loading</span> &#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">        height: 100vh;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#loading</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">        margin: 0 10px;</span><br><span class="line">        height: 30px;</span><br><span class="line">        width: 20px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">        border-radius: 5px;</span><br><span class="line">        animation: loading 1s linear var(--time) infinite;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="keyword">@keyframes</span> loading &#123;</span></span><br><span class="line">        0% &#123;</span><br><span class="line">            height: 30px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        50% &#123;</span><br><span class="line">            height: 120px;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"loading"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> loading = <span class="built_in">document</span>.getElementById(<span class="string">"loading"</span>),</span></span><br><span class="line"><span class="javascript">        fragment = <span class="built_in">document</span>.createDocumentFragment();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="javascript">        div.className = <span class="string">`item`</span> ;</span></span><br><span class="line"><span class="javascript">        div.style.setProperty(<span class="string">"--time"</span>, <span class="string">`<span class="subst">$&#123;i * <span class="number">100</span>&#125;</span>ms`</span> );</span></span><br><span class="line">        fragment.appendChild(div);</span><br><span class="line">    &#125;</span><br><span class="line">    loading.appendChild(fragment);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过巧妙的使用 css 变量，代码大大的减少了，而且灵活性也变强了(某天说加载的时间差效果不明显，直接将 100 改成 150 即可，无需对每个 :nth-child(n) 进行修改)。</p><h4 id="三、-悬浮跟踪效果"><a href="#三、-悬浮跟踪效果" class="headerlink" title="三、 悬浮跟踪效果"></a>三、 悬浮跟踪效果</h4><p>其实思路也比较简单，先对按钮进行布局和着色，然后使用伪元素标记鼠标的位置，定义 <code>--x</code> 和 <code>--y</code> 表示伪元素在按钮里的坐标位置，通过 js 获取鼠标在按钮上的 offsetLeft 和 offsetTop 分别赋值给 <code>--x</code> 和 <code>--y</code> ，再对伪元素添加径向渐变的背景颜色。</p><p><img src="/assets/blogImg/hover-button.gif" alt="hover-button"></p><p>第一步: 获取鼠标的位置，计算相对按钮的偏移位置，将坐标存到变量中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>)</span><br><span class="line">btn.addEventListener(<span class="string">'mousemove'</span>, (e) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">        offsetLeft,</span><br><span class="line">        offsetTop,</span><br><span class="line">        style</span><br><span class="line">    &#125; = e.target</span><br><span class="line">    <span class="keyword">const</span> x = e.pageX - offsetLeft,</span><br><span class="line">        y = e.pageY - offsetTop</span><br><span class="line">    style.setProperty(<span class="string">'--x'</span>, <span class="string">`<span class="subst">$&#123;x&#125;</span>px`</span> )</span><br><span class="line">    style.setProperty(<span class="string">'--y'</span>, <span class="string">`<span class="subst">$&#123;y&#125;</span>px`</span> )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>第二步：定义 <code>span</code> 元素的层级，渐变显示在文字上方，将伪元素 <code>after</code> 的 <code>width</code> 和 <code>height</code> 都默认设置为 0 (不显示)，当鼠标经过时改为 <code>300px</code> ， 并设置动画，在background 属性上应用径向渐变 <code>radial-gradient</code> ，使用。closest-side覆盖整个面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#btn</span> &#123;</span></span><br><span class="line">        width: 146px;</span><br><span class="line">        height: 46px;</span><br><span class="line">        line-height: 46px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        border-radius: 10px;</span><br><span class="line">        font-size: 18px;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#788cff</span>;</span></span><br><span class="line">        font-weight: bold;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        user-select: none;</span><br><span class="line">        position: relative;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#btn</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">        position: relative;</span><br><span class="line">        z-index: 999;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#btn</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">        content: '';</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: var(--x);</span><br><span class="line">        top: var(--y);</span><br><span class="line">        width: var(--size);</span><br><span class="line">        height: var(--size);</span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-tag">radial-gradient</span>(<span class="selector-id">#c47dde</span>, <span class="selector-tag">transparent</span>);</span></span><br><span class="line">        transform: translate(-50%, -50%);</span><br><span class="line"><span class="css">        <span class="comment">/* 让伪元素中心跟随着鼠标点 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">transition</span>: <span class="selector-tag">width</span> <span class="selector-class">.1s</span> <span class="selector-tag">ease-in-out</span>,</span></span><br><span class="line"><span class="css">                    <span class="selector-tag">height</span> <span class="selector-class">.1s</span> <span class="selector-tag">ease-in-out</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#btn</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">        --size: 300px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就这样，一个炫酷的按钮就大功告成了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、-网站换肤&quot;&gt;&lt;a href=&quot;#一、-网站换肤&quot; class=&quot;headerlink&quot; title=&quot;一、 网站换肤&quot;&gt;&lt;/a&gt;一、 网站换肤&lt;/h4&gt;&lt;p&gt;1、实现网站换肤功能，一般最先想到的是用全局 class 控制样式切换&lt;br&gt;缺点：全局控制 CSS，在项目不大，换肤样式不多的情况下，还能勉强够用。但是换肤样式很多的话，代码会非常臃肿，不利于维护。&lt;br&gt;2、通过 js 来切换引入 CSS 样式的 href 属性值，来达到样式切换的目的。&lt;br&gt;缺点：使用 js 改变 href 属性会带来加载延迟(样式文件越大，加载越久)。&lt;br&gt;3、使用 js 修改 css 变量值来达到换肤效果。&lt;/p&gt;
&lt;p&gt;今天我们要说的就是第三种, 使用 js 修改 css 变量值来达到换肤效果&lt;/p&gt;
    
    </summary>
    
    
      <category term="+ css" scheme="//sysy.site/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS 变量(variable) -- 基础篇</title>
    <link href="//sysy.site/2020/03/19/css-variable-1/"/>
    <id>//sysy.site/2020/03/19/css-variable-1/</id>
    <published>2020-03-19T13:09:00.000Z</published>
    <updated>2020-05-17T07:50:22.953Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​    css 变量可以让你不使用任何预处理器 (less, sass, stylus)，不需要通过任何工具预处理，可以原生在浏览器中使用变量</p><h4 id="一、变量的声明"><a href="#一、变量的声明" class="headerlink" title="一、变量的声明"></a>一、变量的声明</h4><p>​    声明变量的时候，变量名前要加两根连字符 <strong>(–)</strong>。<br>​</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">--bg-color</span>: <span class="number">#f40</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    上面代码中，声明了一个css变量，你可能会问，为什么官方要选择两根连字符表示变量？因为 $bg-color 被 sass 用掉了，@bg-color 被 less 用掉了，所以官方为了不产生冲突，css 声明变量改用两根连字符了。</p><a id="more"></a><h4 id="二、变量的使用"><a href="#二、变量的使用" class="headerlink" title="二、变量的使用"></a>二、变量的使用</h4><p>​    css 中使用 <strong>var</strong> 函数用于读取变量 (没错，就是 js 中声明变量的那个 var，不过，此 var (css) 非比 var (js) )。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">--bg-color</span>: <span class="number">#f40</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--bg-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>var</strong> 函数具有两个参数，第一个参数表示使用的变量，第二个参数表示默认值，那么就存在以下两种使用情况:</p><ol><li>两个参数都传递，如果变量存在，则正确引用，如果使用的变量不存在，则会使用默认值。</li><li>只传递第一个参数，且变量存在，则正确使用变量， 如果变量不存在，则默认使用失败。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  color: var(--color, #ff0); // 变量不存在，则使用默认值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意 </strong>: 变量只能用作属性值，不能用作属性名。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">--font</span>: font-size;</span><br><span class="line">  var(--font): 18px; // 无效</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、变量值的类型"><a href="#三、变量值的类型" class="headerlink" title="三、变量值的类型"></a>三、变量值的类型</h4><ol><li>可以是字符串</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">--content</span>: <span class="string">'hello world !!!'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  content: var(--content); // 允许</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>可以是数字，但是不能与单位直接连用，需要借助 <strong>calc</strong> 计算函数</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">--num</span>: <span class="number">10</span>;</span><br><span class="line">  margin: var(--num)px; // 错误</span><br><span class="line">  margin: calc(var(--num) * 1px); // 正确</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四、作用域"><a href="#四、作用域" class="headerlink" title="四、作用域"></a>四、作用域</h4><p>变量只在当前元素及其子元素中有效</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">--color</span>: <span class="selector-id">#f00</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.children</span> &#123;</span></span><br><span class="line">    color: var(--color);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">    color: var(--color); // 无效</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'parent'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'children'</span>&gt;</span>hello world !!!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'box'</span>&gt;</span>box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时只有 hello world !!! 变成了红色字体，而 box 中的元素还是黑色字体，由于这个原因一般把声明的变量放在根元素 <strong>:root</strong> 里面，以确保任何元素都可以使用它们。</p><h4 id="五、在-JS-中使用"><a href="#五、在-JS-中使用" class="headerlink" title="五、在 JS 中使用"></a>五、在 JS 中使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'box'</span>&gt;</span>box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>const box = document. getElementById(‘box’)</p></blockquote><ul><li>读取变量：elem. style. getPropertyValue</li><li>设置变量：elem. style. setProperty</li><li>删除变量：elem. style. removeProperty</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置变量</span></span><br><span class="line">box.style.setProperty(<span class="string">'--color'</span>, <span class="string">'#f40'</span>)</span><br><span class="line"><span class="comment">// 读取变量</span></span><br><span class="line">box.style.getPropertyValue(<span class="string">'--color'</span>)</span><br><span class="line"><span class="comment">// 删除变量</span></span><br><span class="line">box.style.removeProperty(<span class="string">'--color'</span>)</span><br></pre></td></tr></table></figure><h4 id="六、兼容性"><a href="#六、兼容性" class="headerlink" title="六、兼容性"></a>六、兼容性</h4><p>目前现代浏览器都支持(IE 除外，毕竟微软都抛弃了 [手动狗头])</p><p><img src="/assets/blogImg/css-variable.png" alt="css变量兼容性"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;​    css 变量可以让你不使用任何预处理器 (less, sass, stylus)，不需要通过任何工具预处理，可以原生在浏览器中使用变量&lt;/p&gt;
&lt;h4 id=&quot;一、变量的声明&quot;&gt;&lt;a href=&quot;#一、变量的声明&quot; class=&quot;headerlink&quot; title=&quot;一、变量的声明&quot;&gt;&lt;/a&gt;一、变量的声明&lt;/h4&gt;&lt;p&gt;​    声明变量的时候，变量名前要加两根连字符 &lt;strong&gt;(–)&lt;/strong&gt;。&lt;br&gt;​&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:root&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;--bg-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#f40&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​    上面代码中，声明了一个css变量，你可能会问，为什么官方要选择两根连字符表示变量？因为 $bg-color 被 sass 用掉了，@bg-color 被 less 用掉了，所以官方为了不产生冲突，css 声明变量改用两根连字符了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="+ css" scheme="//sysy.site/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>32个js代码小技巧</title>
    <link href="//sysy.site/2020/03/15/js-daimapianduan/"/>
    <id>//sysy.site/2020/03/15/js-daimapianduan/</id>
    <published>2020-03-15T07:12:00.000Z</published>
    <updated>2020-05-17T07:50:22.957Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/landscape.jpg" alt="配图"></p><p>1、<strong>生成长度为 10 的随机 ID</strong></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).slice(<span class="number">2</span>) <span class="comment">// "z29mwr6neu"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>2、<strong>生成随机 16 进制颜色码</strong></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> color = <span class="string">`#<span class="subst">$&#123;<span class="built_in">Math</span>.random().toString(<span class="number">16</span>).slice(<span class="number">2</span>, <span class="number">8</span>)&#125;</span>`</span> <span class="comment">// "#3386d8"</span></span><br></pre></td></tr></table></figure><p>3、<strong>小数取整</strong></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = ~~<span class="number">2.22</span>    <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">let</span> number = <span class="number">2.11</span> | <span class="number">0</span>  <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">let</span> number = <span class="number">2.00</span> &gt;&gt; <span class="number">0</span> <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>4、<strong>两数交换</strong></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">20</span>, b = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> a = a + b; b = a - b; a = a - b</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> [a, b] = [b, a]  <span class="comment">// ES6解构</span></span><br></pre></td></tr></table></figure><p>5、<strong>深拷贝</strong></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> clone = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))  <span class="comment">// 只能用于简单数据类型，数组，对象</span></span><br></pre></td></tr></table></figure><p>6、<strong>递归求阶乘</strong></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n &gt; <span class="number">1</span>) ? n * factorial(n - <span class="number">1</span>) : n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure><p>7、<strong>求 1 - n 之和</strong></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumHander</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = arr.length</span><br><span class="line">    <span class="keyword">return</span> len * (len - <span class="number">1</span>) / <span class="number">2</span>  <span class="comment">// len * (arr[0] + arr[len - 1]) / 2</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">sumHander(arr) <span class="comment">// 45</span></span><br></pre></td></tr></table></figure><p>8、<strong>银行计数法</strong></p><ul><li><p><code>正则法</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'10000000'</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(?=(\B)(\d&#123;3&#125;)+$)/g</span></span><br><span class="line"></span><br><span class="line">str.replace(reg, <span class="string">','</span>) <span class="comment">// "10,000,000"</span></span><br></pre></td></tr></table></figure></li><li><p><code>内置函数法</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'100000000'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> arr = str.split(<span class="string">''</span>).reverse()</span><br><span class="line"><span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">prev, next, index</span>) =&gt;</span> (index % <span class="number">3</span> ? next : next + <span class="string">','</span> ) + prev)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">format(str) <span class="comment">// "100,000,000"</span></span><br></pre></td></tr></table></figure></li></ul><p>9、<strong>判断数组中的元素是否都相等</strong></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> allEqual = <span class="function"><span class="params">arr</span> =&gt;</span> arr.every(<span class="function"><span class="params">item</span> =&gt;</span> item === arr[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">allEqual([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]) <span class="comment">// true</span></span><br><span class="line">allEqual([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>10、<strong>求平均数</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> average = <span class="function">(<span class="params">...rest</span>) =&gt;</span> <span class="function">(<span class="params">rest.reduce((prev, next</span>) =&gt;</span> prev + next) / rest.length)</span><br><span class="line"></span><br><span class="line">average(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></code></pre><p>11、<strong>求字符串的字节长度</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> byteSize = <span class="function"><span class="params">str</span> =&gt;</span> <span class="keyword">new</span> Blob([str]).size</span><br><span class="line"></span><br><span class="line">byteSize(<span class="string">'Hello world'</span>) <span class="comment">// 11 </span></span><br><span class="line">byteSize(<span class="string">'你好，世界'</span>) <span class="comment">// 15 中文汉字在utf-8中到底占3个字节, 在 gbk 编码中占据2个字节</span></span><br></pre></td></tr></table></figure></code></pre><p>12、<strong>将首字母转换成大写</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toFirstUpperCase = <span class="function">(<span class="params">[first, ...rest]</span>) =&gt;</span> first.toUpperCase() + rest.join(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">toFirstUpperCase(<span class="string">'hello world'</span>) <span class="comment">// "Hello world"</span></span><br></pre></td></tr></table></figure></code></pre><p>13、<strong>将首字母转换成小写</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">const</span> toFirstLowerCase = <span class="function">(<span class="params">[first, ...rest]</span>) =&gt;</span> first.toLowerCase() + rest.join(<span class="string">''</span>)</span><br><span class="line">    </span><br><span class="line">    toFirstLowerCase(<span class="string">'Hello world'</span>) <span class="comment">// "hello world"</span></span><br><span class="line">    <span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">14、**将一个句子中的每个单词首字母转换成大写**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    `</span><span class="string">``</span>javascript</span><br><span class="line">    <span class="keyword">const</span> capitalize = <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="regexp">/\b\w/g</span>, char =&gt; char.toUpperCase())</span><br><span class="line">    </span><br><span class="line">    capitalize(<span class="string">'hello world'</span>) <span class="comment">// "Hello World"</span></span><br></pre></td></tr></table></figure></code></pre><p>15、<strong>将连字符隔开的字符串转化成小驼峰</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toSmallHump = <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="regexp">/-(\w)/g</span>, ($, $<span class="number">1</span>) =&gt; $<span class="number">1.</span>toUpperCase())</span><br><span class="line"></span><br><span class="line">toSmallHump(<span class="string">"the-first-name"</span>) <span class="comment">// "theFirstName"</span></span><br></pre></td></tr></table></figure></code></pre><p>16、<strong>移除数组中值为 <code>false</code> 的内容</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compact = <span class="function"><span class="params">arr</span> =&gt;</span> arr.filter(<span class="built_in">Boolean</span>)</span><br><span class="line"></span><br><span class="line">compact([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">NaN</span>, <span class="literal">false</span>, <span class="string">''</span>, <span class="literal">undefined</span>]) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></code></pre><p>17、<strong>统计数组中某个值出现的次数</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> occurrences = <span class="function">(<span class="params">arr, val</span>) =&gt;</span> arr.reduce(<span class="function">(<span class="params">count, item</span>) =&gt;</span> item === val ? count + <span class="number">1</span> : count , <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">occurrences([<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>], <span class="number">1</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></code></pre><p>18、<strong>返回当前天是当前年的第几天</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getCurrentDay = <span class="function"><span class="params">date</span> =&gt;</span> <span class="built_in">Math</span>.floor((date - <span class="keyword">new</span> <span class="built_in">Date</span>(date.getFullYear(), <span class="number">0</span>, <span class="number">0</span>)) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">getCurrentDay(<span class="keyword">new</span> <span class="built_in">Date</span>()) <span class="comment">// 57</span></span><br></pre></td></tr></table></figure></code></pre><p>19、<strong>获取当前几点钟</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getNowTime = <span class="function"><span class="params">date</span> =&gt;</span> date.toTimeString().slice(<span class="number">0</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">getNowTime(<span class="keyword">new</span> <span class="built_in">Date</span>()) <span class="comment">// "10:03:23"</span></span><br></pre></td></tr></table></figure></code></pre><p>20、<strong>获取两个日期之间相差多少天</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getDaysDiffBetweenDates = <span class="function">(<span class="params">dateStart, dateEnd</span>) =&gt;</span> (dateEnd - dateStart) / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">getDaysDiffBetweenDates(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-01-01'</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-02-27'</span>)) <span class="comment">// 57</span></span><br></pre></td></tr></table></figure></code></pre><p>21、<strong>获取元素对应样式</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem, prop</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(elem,<span class="literal">null</span>)[prop];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem.currenStyle[prop];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getStyle(<span class="built_in">document</span>.body, <span class="string">'padding'</span>) <span class="comment">// "0px"</span></span><br></pre></td></tr></table></figure></code></pre><p>22、<strong>获取数据类型</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getType = <span class="function"><span class="params">val</span> =&gt;</span> val === <span class="literal">undefined</span> ? <span class="string">'undefined'</span> : val === <span class="literal">null</span> ? <span class="string">'null'</span> : val.constructor.name.toLowerCase()</span><br><span class="line"></span><br><span class="line">getType([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// "array"</span></span><br><span class="line">getType(<span class="number">1</span>) <span class="comment">// "number"</span></span><br></pre></td></tr></table></figure></code></pre><p>23、<strong>在某个元素后插入元素</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> insertAfter = <span class="function">(<span class="params">targetElem, elem</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parentElement = targetElem.parentElement</span><br><span class="line">    parentElement &amp;&amp; parentElement.insertBefore(elem, targetElem.nextSibling)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">insertAfter(<span class="built_in">document</span>.querySelector(<span class="string">'div'</span>), <span class="built_in">document</span>.createElement(<span class="string">'p'</span>))</span><br></pre></td></tr></table></figure></code></pre><p>24、<strong>返回两个数组元素的交集</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> intersection = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a.filter(<span class="function"><span class="params">i</span> =&gt;</span> b.includes(i))</span><br><span class="line"></span><br><span class="line">intersection([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]) <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure></code></pre><p>25、<strong>数组扁平化</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deepFlatten = <span class="function"><span class="params">arr</span> =&gt;</span> [].concat(...arr.map(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">Array</span>.isArray(v) ? deepFlatten(v) : v))</span><br><span class="line"></span><br><span class="line">deepFlatten([<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]], <span class="number">6</span>]) <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></code></pre><p>26、<strong>数组去重</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unique = <span class="function"><span class="params">arr</span> =&gt;</span> [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line"></span><br><span class="line">unique([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]) <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></code></pre><p>27、<strong>将度数转成弧度</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> degToRad = <span class="function"><span class="params">deg</span> =&gt;</span> (deg * <span class="built_in">Math</span>.PI) / <span class="number">180</span></span><br><span class="line"></span><br><span class="line">degToRad(<span class="number">90</span>) <span class="comment">// 1.5707963267948966</span></span><br></pre></td></tr></table></figure></code></pre><p>28、<strong>将数字拆分成数组</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> digitize = <span class="function"><span class="params">num</span> =&gt;</span> [...<span class="string">`<span class="subst">$&#123;num&#125;</span>`</span>].map(<span class="function"><span class="params">i</span> =&gt;</span> <span class="built_in">parseInt</span>(i))</span><br><span class="line"></span><br><span class="line">digitize(<span class="number">123</span>) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></code></pre><p>29、<strong>计算两点之间的距离</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> distance = <span class="function">(<span class="params">x, y, x1, y1</span>) =&gt;</span> <span class="built_in">Math</span>.hypot(x1- x, y1 - y)</span><br><span class="line"></span><br><span class="line">distance(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>) <span class="comment">// 1.4142135623730951</span></span><br></pre></td></tr></table></figure></code></pre><p>30、<strong>按照给定的函数条件筛选数组，将最后一个满足条件的元素进行删除</strong> </p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> findLast = <span class="function">(<span class="params">arr, fn</span>) =&gt;</span> arr.filter(fn).pop()</span><br><span class="line"></span><br><span class="line">findLast([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], n =&gt; n % <span class="number">2</span> === <span class="number">0</span>) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></code></pre><p>31、<strong>判断一个对象是否为空</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isObjectEmpty = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">Object</span>.keys(obj).length === <span class="number">0</span></span><br><span class="line"></span><br><span class="line">isObjectEmpty(&#123;&#125;) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></code></pre><p>32、<strong>错误处理代码(有错自动搜索，手动滑稽)</strong></p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">// your code</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">window</span>.open(<span class="string">`https://stackoverflow.com/search?q=<span class="subst">$&#123;<span class="built_in">String</span>(error)&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/landscape.jpg&quot; alt=&quot;配图&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、&lt;strong&gt;生成长度为 10 的随机 ID&lt;/strong&gt;&lt;/p&gt;
   &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; id = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random().toString(&lt;span class=&quot;number&quot;&gt;36&lt;/span&gt;).slice(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// &quot;z29mwr6neu&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="//sysy.site/tags/javascript/"/>
    
      <category term="js技巧" scheme="//sysy.site/tags/js%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
</feed>
