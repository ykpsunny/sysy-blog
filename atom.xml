<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sunny的博客</title>
  <icon>https://www.gravatar.com/avatar/19bada5bb5e517ac754b01b5f33e9b22</icon>
  <subtitle>越努力，越幸运</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//sysy.site/"/>
  <updated>2020-03-15T08:27:23.523Z</updated>
  <id>//sysy.site/</id>
  
  <author>
    <name>Sunny</name>
    <email>2309456411@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>31个js代码小技巧</title>
    <link href="//sysy.site/2020/03/15/js-daimapianduan/"/>
    <id>//sysy.site/2020/03/15/js-daimapianduan/</id>
    <published>2020-03-15T07:12:00.000Z</published>
    <updated>2020-03-15T08:27:23.523Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/js-xiaojiqiao.jpg" alt="配图"></p><ol><li><p><strong>生成长度为 10 的随机 ID</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).slice(<span class="number">2</span>) <span class="comment">// "z29mwr6neu"</span></span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li><p><strong>生成随机 16 进制颜色码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> color = <span class="string">`#<span class="subst">$&#123;<span class="built_in">Math</span>.random().toString(<span class="number">16</span>).slice(<span class="number">2</span>, <span class="number">8</span>)&#125;</span>`</span> <span class="comment">// "#3386d8"</span></span><br></pre></td></tr></table></figure></li><li><p><strong>小数取整</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = ~~<span class="number">2.22</span>    <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">let</span> number = <span class="number">2.11</span> | <span class="number">0</span>  <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">let</span> number = <span class="number">2.00</span> &gt;&gt; <span class="number">0</span> <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li><p><strong>两数交换</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">20</span>, b = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> a = a + b; b = a - b; a = a - b</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> [a, b] = [b, a]  <span class="comment">// ES6解构</span></span><br></pre></td></tr></table></figure></li><li><p><strong>深拷贝</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> clone = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))  <span class="comment">// 只能用于简单数据类型，数组，对象</span></span><br></pre></td></tr></table></figure></li><li><p><strong>递归求阶乘</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n &gt; <span class="number">1</span>) ? n * factorial(n - <span class="number">1</span>) : n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure></li><li><p><strong>求 1 - n 之和</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumHander</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = arr.length</span><br><span class="line">    <span class="keyword">return</span> len * (len - <span class="number">1</span>) / <span class="number">2</span>  <span class="comment">// len * (arr[0] + arr[len - 1]) / 2</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">sumHander(arr) <span class="comment">// 45</span></span><br></pre></td></tr></table></figure></li><li><p><strong>银行计数法</strong></p><ul><li><p><code>正则法</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'10000000'</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(?=(\B)(\d&#123;3&#125;)+$)/g</span></span><br><span class="line"></span><br><span class="line">str.replace(reg, <span class="string">','</span>) <span class="comment">// "10,000,000"</span></span><br></pre></td></tr></table></figure></li><li><p><code>内置函数法</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'100000000'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> arr = str.split(<span class="string">''</span>).reverse()</span><br><span class="line"><span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">prev, next, index</span>) =&gt;</span> (index % <span class="number">3</span> ? next : next + <span class="string">','</span> ) + prev)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">format(str) <span class="comment">// "100,000,000"</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>判断数组中的元素是否都相等</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> allEqual = <span class="function"><span class="params">arr</span> =&gt;</span> arr.every(<span class="function"><span class="params">item</span> =&gt;</span> item === arr[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">allEqual([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]) <span class="comment">// true</span></span><br><span class="line">allEqual([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><strong>求平均数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> average = <span class="function">(<span class="params">...rest</span>) =&gt;</span> <span class="function">(<span class="params">rest.reduce((prev, next</span>) =&gt;</span> prev + next) / rest.length)</span><br><span class="line"></span><br><span class="line">average(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li><li><p><strong>求字符串的字节长度</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> byteSize = <span class="function"><span class="params">str</span> =&gt;</span> <span class="keyword">new</span> Blob([str]).size</span><br><span class="line"></span><br><span class="line">byteSize(<span class="string">'Hello world'</span>) <span class="comment">// 11 </span></span><br><span class="line">byteSize(<span class="string">'你好，世界'</span>) <span class="comment">// 15 中文汉字在utf-8中到底占3个字节, 在 gbk 编码中占据2个字节</span></span><br></pre></td></tr></table></figure></li><li><p><strong>将首字母转换成大写</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toFirstUpperCase = <span class="function">(<span class="params">[first, ...rest]</span>) =&gt;</span> first.toUpperCase() + rest.join(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">toFirstUpperCase(<span class="string">'hello world'</span>) <span class="comment">// "Hello world"</span></span><br></pre></td></tr></table></figure></li><li><p><strong>将首字母转换成小写</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">const</span> toFirstLowerCase = <span class="function">(<span class="params">[first, ...rest]</span>) =&gt;</span> first.toLowerCase() + rest.join(<span class="string">''</span>)</span><br><span class="line">    </span><br><span class="line">    toFirstLowerCase(<span class="string">'Hello world'</span>) <span class="comment">// "hello world"</span></span><br><span class="line">    <span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">14. **将一个句子中的每个单词首字母转换成大写**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    `</span><span class="string">``</span>javascript</span><br><span class="line">    <span class="keyword">const</span> capitalize = <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="regexp">/\b\w/g</span>, char =&gt; char.toUpperCase())</span><br><span class="line">    </span><br><span class="line">    capitalize(<span class="string">'hello world'</span>) <span class="comment">// "Hello World"</span></span><br></pre></td></tr></table></figure></li><li><p><strong>将连字符隔开的字符串转化成小驼峰</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toSmallHump = <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="regexp">/-(\w)/g</span>, ($, $<span class="number">1</span>) =&gt; $<span class="number">1.</span>toUpperCase())</span><br><span class="line"></span><br><span class="line">toSmallHump(<span class="string">"the-first-name"</span>) <span class="comment">// "theFirstName"</span></span><br></pre></td></tr></table></figure></li><li><p><strong>移除数组中值为 <code>false</code> 的内容</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compact = <span class="function"><span class="params">arr</span> =&gt;</span> arr.filter(<span class="built_in">Boolean</span>)</span><br><span class="line"></span><br><span class="line">compact([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">NaN</span>, <span class="literal">false</span>, <span class="string">''</span>, <span class="literal">undefined</span>]) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>统计数组中某个值出现的次数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> occurrences = <span class="function">(<span class="params">arr, val</span>) =&gt;</span> arr.reduce(<span class="function">(<span class="params">count, item</span>) =&gt;</span> item === val ? count + <span class="number">1</span> : count , <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">occurrences([<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>], <span class="number">1</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li><li><p><strong>返回当前天是当前年的第几天</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getCurrentDay = <span class="function"><span class="params">date</span> =&gt;</span> <span class="built_in">Math</span>.floor((date - <span class="keyword">new</span> <span class="built_in">Date</span>(date.getFullYear(), <span class="number">0</span>, <span class="number">0</span>)) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">getCurrentDay(<span class="keyword">new</span> <span class="built_in">Date</span>()) <span class="comment">// 57</span></span><br></pre></td></tr></table></figure></li><li><p><strong>获取当前几点钟</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getNowTime = <span class="function"><span class="params">date</span> =&gt;</span> date.toTimeString().slice(<span class="number">0</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">getNowTime(<span class="keyword">new</span> <span class="built_in">Date</span>()) <span class="comment">// "10:03:23"</span></span><br></pre></td></tr></table></figure></li><li><p><strong>获取两个日期之间相差多少天</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getDaysDiffBetweenDates = <span class="function">(<span class="params">dateStart, dateEnd</span>) =&gt;</span> (dateEnd - dateStart) / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">getDaysDiffBetweenDates(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-01-01'</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-02-27'</span>)) <span class="comment">// 57</span></span><br></pre></td></tr></table></figure></li><li><p><strong>获取元素对应样式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem, prop</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(elem,<span class="literal">null</span>)[prop];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem.currenStyle[prop];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getStyle(<span class="built_in">document</span>.body, <span class="string">'padding'</span>) <span class="comment">// "0px"</span></span><br></pre></td></tr></table></figure></li><li><p><strong>获取数据类型</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getType = <span class="function"><span class="params">val</span> =&gt;</span> val === <span class="literal">undefined</span> ? <span class="string">'undefined'</span> : val === <span class="literal">null</span> ? <span class="string">'null'</span> : val.constructor.name.toLowerCase()</span><br><span class="line"></span><br><span class="line">getType([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// "array"</span></span><br><span class="line">getType(<span class="number">1</span>) <span class="comment">// "number"</span></span><br></pre></td></tr></table></figure></li><li><p><strong>在某个元素后插入元素</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> insertAfter = <span class="function">(<span class="params">targetElem, elem</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parentElement = targetElem.parentElement</span><br><span class="line">    parentElement &amp;&amp; parentElement.insertBefore(elem, targetElem.nextSibling)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">insertAfter(<span class="built_in">document</span>.querySelector(<span class="string">'div'</span>), <span class="built_in">document</span>.createElement(<span class="string">'p'</span>))</span><br></pre></td></tr></table></figure></li><li><p><strong>返回两个数组元素的交集</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> intersection = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a.filter(<span class="function"><span class="params">i</span> =&gt;</span> b.includes(i))</span><br><span class="line"></span><br><span class="line">intersection([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]) <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>数组扁平化</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deepFlatten = <span class="function"><span class="params">arr</span> =&gt;</span> [].concat(...arr.map(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">Array</span>.isArray(v) ? deepFlatten(v) : v))</span><br><span class="line"></span><br><span class="line">deepFlatten([<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]], <span class="number">6</span>]) <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>数组去重</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unique = <span class="function"><span class="params">arr</span> =&gt;</span> [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line"></span><br><span class="line">unique([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]) <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>将度数转成弧度</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> degToRad = <span class="function"><span class="params">deg</span> =&gt;</span> (deg * <span class="built_in">Math</span>.PI) / <span class="number">180</span></span><br><span class="line"></span><br><span class="line">degToRad(<span class="number">90</span>) <span class="comment">// 1.5707963267948966</span></span><br></pre></td></tr></table></figure></li><li><p><strong>将数字拆分成数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> digitize = <span class="function"><span class="params">num</span> =&gt;</span> [...<span class="string">`<span class="subst">$&#123;num&#125;</span>`</span>].map(<span class="function"><span class="params">i</span> =&gt;</span> <span class="built_in">parseInt</span>(i))</span><br><span class="line"></span><br><span class="line">digitize(<span class="number">123</span>) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>计算两点之间的距离</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> distance = <span class="function">(<span class="params">x, y, x1, y1</span>) =&gt;</span> <span class="built_in">Math</span>.hypot(x1- x, y1 - y)</span><br><span class="line"></span><br><span class="line">distance(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>) <span class="comment">// 1.4142135623730951</span></span><br></pre></td></tr></table></figure></li><li><p><strong>按照给定的函数条件筛选数组，将最后一个满足条件的元素进行删除</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> findLast = <span class="function">(<span class="params">arr, fn</span>) =&gt;</span> arr.filter(fn).pop()</span><br><span class="line"></span><br><span class="line">findLast([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], n =&gt; n % <span class="number">2</span> === <span class="number">0</span>) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></li><li><p><strong>判断一个对象是否为空</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isObjectEmpty = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">Object</span>.keys(obj).length === <span class="number">0</span></span><br><span class="line"></span><br><span class="line">isObjectEmpty(&#123;&#125;) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/js-xiaojiqiao.jpg&quot; alt=&quot;配图&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;生成长度为 10 的随机 ID&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; id = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random().toString(&lt;span class=&quot;number&quot;&gt;36&lt;/span&gt;).slice(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// &quot;z29mwr6neu&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="//sysy.site/tags/javascript/"/>
    
      <category term="js技巧" scheme="//sysy.site/tags/js%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
</feed>
